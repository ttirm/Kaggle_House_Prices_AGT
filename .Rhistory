res
class(res)
res <- as.data.frame(res)
r <- t(sapply(symbols, function(symbol)
+ c(beta = lm(res[, symbol] ~ riskpremium(SP500))$coefficients[[2]], mean = mean(res[, symbol]))))
r <- as.data.frame(r)
r
plot(r$beta, r$mean)
abline(lm(r$mean ~ r$beta), col = 'red')
summary(lm(r$mean ~ r$beta))
1-0.998
1-0.9994
library(manipulate)
install.packages("manipulate")
library(manipulate)
library(manipulate)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("shiny")
library(shiny)
library(qdap)
library(rJava)
?bag_o_words
library(tm)
library(RWeka)
library(ggplot2)
library(wordcloud)
library(NLP)
library(openNLP)
library(magrittr)
library(openNLPmodels.en);
# Data loading
blogs <- readLines("./final/en_US/en_US.blogs.txt", n = 100, encoding = "UTF-8")
blogs <- paste(blogs, collapse = " ")
logs <- as.String(blogs)
# Create annotators for words, sentences, persons, locations and organizations
word_ann <- Maxent_Word_Token_Annotator()
sent_ann <- Maxent_Sent_Token_Annotator()
person_ann <- Maxent_Entity_Annotator(kind = "person")
location_ann <- Maxent_Entity_Annotator(kind = "location")
organization_ann <- Maxent_Entity_Annotator(kind = "organization")
# Apply the annotators to the text
pipeline <- list(sent_ann,
word_ann,
person_ann,
location_ann,
organization_ann)
blogs_annotations <- annotate(blogs, pipeline)
# Data loading
blogs <- readLines("./final/en_US/en_US.blogs.txt", n = 100, encoding = "UTF-8")
blogs <- paste(blogs, collapse = " ")
blogs <- as.String(blogs)
# Create annotators for words, sentences, persons, locations and organizations
word_ann <- Maxent_Word_Token_Annotator()
sent_ann <- Maxent_Sent_Token_Annotator()
person_ann <- Maxent_Entity_Annotator(kind = "person")
location_ann <- Maxent_Entity_Annotator(kind = "location")
organization_ann <- Maxent_Entity_Annotator(kind = "organization")
# Apply the annotators to the text
pipeline <- list(sent_ann,
word_ann,
person_ann,
location_ann,
organization_ann)
blogs_annotations <- annotate(blogs, pipeline)
blogs <- readLines("./final/en_US/en_US.blogs.txt", n = 100, encoding = "UTF-8")
#blogs <- paste(blogs, collapse = " ")
blogs <- as.String(blogs)
# Create annotators for words, sentences, persons, locations and organizations
word_ann <- Maxent_Word_Token_Annotator()
sent_ann <- Maxent_Sent_Token_Annotator()
person_ann <- Maxent_Entity_Annotator(kind = "person")
location_ann <- Maxent_Entity_Annotator(kind = "location")
organization_ann <- Maxent_Entity_Annotator(kind = "organization")
# Apply the annotators to the text
pipeline <- list(sent_ann,
word_ann,
person_ann,
location_ann,
organization_ann)
blogs_annotations <- annotate(blogs, pipeline)
load(mtcars)
load(cars)
data(mtcars)
head(mtcars)
summary(mtcars)
summary(mtcars[, 1:4])
str(mtcars)
table(cyl)
table(mtcars$cyl)
table(mtcars$cyl, mtcars$mpg)
plot(table(mtcars$cyl, mtcars$mpg))
ggplot(mtcars, aes(cyl, mpg) ) +
geom_point()
library(ggplot)
library(ggplot2)
ggplot(mtcars, aes(cyl, mpg) ) +
geom_point()
library(lm)
lm(mpg ~ cyl + hp, data = mtcars)
fit <- lm(mpg ~ cyl + hp, data = mtcars)
plot(fit)
plot(fit)
summary(fit)
fit$model
summary(fit)
plot(fit)
shiny::runApp('GitHub/Coursera_DS_Capstone/project_app')
runApp('GitHub/Coursera_DS_Capstone/project_app')
cap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=" ")
}
c <- c("dog", "cat", "bird")
cap(c)
sapply(c, cap)
strsplit(c, " ")[[1]]
strsplit("dog", " ")[[1]]
runApp('GitHub/Coursera_DS_Capstone/project_app')
runApp('GitHub/Coursera_DS_Capstone/project_app')
runApp('GitHub/Coursera_DS_Capstone/project_app')
runApp('GitHub/Coursera_DS_Capstone/project_app')
runApp('GitHub/Coursera_DS_Capstone/project_app')
runApp('GitHub/Coursera_DS_Capstone/project_app')
runApp('GitHub/Coursera_DS_Capstone/project_app')
![Caption for the picture.](./project_presentation-figure/app1.png)
![Application Screenshot.](./project_presentation-figure/app1.png)
![Application Screenshot.](project_presentation-figure/app1.png)
* In future developments, an implementation of this project with a big data platform would enable a much more robust solution.
setwd("C:/Users/tiago_000/Documents/GitHub/Kaggle_House_Prices_AGT")
train <- read.csv("./data/train.csv")
test <- read.csv("./data/test.csv")
nas <- apply(train, 2,function(x)sum(is.na(x))/length(x))
nam <- as.character(names(train))
length(nam)
length(nas)
names(nas) <- nam
nas <- nas[nas < 0.5]
nas
train <- train[,names(nas)]
test <- test[,names(nas)[-length(nas)]]
train <- train[unique(train), ]
unique(train)
train <- unique(train)
# NAs treatment
###########################################
head(train$FireplaceQu)
head(train$Fireplaces)
train$FireplaceQu[is.na(train$FireplaceQu)] <- "None"
test$FireplaceQu[is.na(test$FireplaceQu)] <- "None"
head(train$LotFrontage,20)
summary(train$LotFrontage)
head(train$LotArea,20)
train$LotFrontage[is.na(train$LotFrontage)] <- mean(train$LotFrontage, na.rm = TRUE)
test$LotFrontage[is.na(test$LotFrontage)] <- mean(test$LotFrontage, na.rm = TRUE)
train <- read.csv("./data/train.csv", stringsAsFactors = FALSE)
test <- read.csv("./data/test.csv", stringsAsFactors = FALSE)
nas <- apply(train, 2,function(x)sum(is.na(x))/length(x))
nam <- as.character(names(train))
length(nam)
length(nas)
names(nas) <- nam
nas <- nas[nas < 0.5]
nas
train <- train[,names(nas)]
test <- test[,names(nas)[-length(nas)]]
# Remove duplicates
###########################################
train <- unique(train)
# NAs treatment
###########################################
head(train$FireplaceQu)
head(train$Fireplaces)
train$FireplaceQu[is.na(train$FireplaceQu)] <- "None"
test$FireplaceQu[is.na(test$FireplaceQu)] <- "None"
head(train$LotFrontage,20)
summary(train$LotFrontage)
head(train$LotArea,20)
train$LotFrontage[is.na(train$LotFrontage)] <- mean(train$LotFrontage, na.rm = TRUE)
test$LotFrontage[is.na(test$LotFrontage)] <- mean(test$LotFrontage, na.rm = TRUE)
head(train$MasVnrType,50)
head(train$MasVnrArea,50)
train$MasVnrType[is.na(train$MasVnrType)] <- "None"
train$MasVnrArea[is.na(train$MasVnrArea)] <- 0
test$MasVnrType[is.na(test$MasVnrType)] <- "None"
test$MasVnrArea[is.na(test$MasVnrArea)] <- 0
head(train$BsmtQual)
str(train$BsmtQual)
head(train$BsmtCond)
train$BsmtQual[is.na(train$BsmtQual)] <- "None"
train$BsmtCond[is.na(train$BsmtCond)] <- "None"
train$BsmtExposure[is.na(train$BsmtExposure)] <- "None"
train$BsmtFinType1[is.na(train$BsmtFinType1)] <- "None"
train$BsmtFinType2[is.na(train$BsmtFinType2)] <- "None"
test$BsmtQual[is.na(test$BsmtQual)] <- "None"
test$BsmtCond[is.na(test$BsmtCond)] <- "None"
test$BsmtExposure[is.na(test$BsmtExposure)] <- "None"
test$BsmtFinType1[is.na(test$BsmtFinType1)] <- "None"
test$BsmtFinType2[is.na(test$BsmtFinType2)] <- "None"
head(train$Electrical)
train$Electrical[is.na(train$Electrical)] <- "None"
test$Electrical[is.na(test$Electrical)] <- "None"
head(train$GarageType)
train$GarageType[is.na(train$GarageType)] <- "None"
test$GarageType[is.na(test$GarageType)] <- "None"
head(train$GarageCars)
train$GarageCars[is.na(train$GarageCars)] <- 0
test$GarageCars[is.na(test$GarageCars)] <- 0
head(train$GarageArea)
train$GarageArea[is.na(train$GarageArea)] <- 0
test$GarageArea[is.na(test$GarageArea)] <- 0
head(train$GarageQual)
train$GarageQual[is.na(train$GarageQual)] <- "None"
test$GarageQual[is.na(test$GarageQual)] <- "None"
head(train$GarageCond)
train$GarageCond[is.na(train$GarageCond)] <- "None"
test$GarageCond[is.na(test$GarageCond)] <- "None"
head(train$GarageYrBlt)
train$GarageYrBlt[is.na(train$GarageYrBlt)] <- median(train$GarageYrBlt, na.rm = TRUE)
test$GarageYrBlt[is.na(test$GarageYrBlt)] <- median(test$GarageYrBlt, na.rm = TRUE)
head(train$GarageFinish)
train$GarageFinish[is.na(train$GarageFinish)] <- "None"
test$GarageFinish[is.na(test$GarageFinish)] <- "None"
nas2 <- apply(train, 2,function(x)sum(is.na(x))/length(x))
nas2[nas2 >0]
nas2 <- apply(test, 2,function(x)sum(is.na(x))/length(x))
nas2[nas2 >0]
# Imputation test
test[is.na(test_num$BsmtFinSF1), c("BsmtFinSF1" ,  "BsmtFinSF2",   "BsmtUnfSF",  "TotalBsmtSF", "BsmtFullBath",  "BsmtHalfBath")] <- 0
test[is.na(test_num$BsmtFullBath), c("BsmtFullBath","BsmtHalfBath")] <- 0
# Imputation test
test[is.na(test$BsmtFinSF1), c("BsmtFinSF1" ,  "BsmtFinSF2",   "BsmtUnfSF",  "TotalBsmtSF", "BsmtFullBath",  "BsmtHalfBath")] <- 0
test[is.na(test$BsmtFullBath), c("BsmtFullBath","BsmtHalfBath")] <- 0
train <- train[, -nearZeroVar(train)]
test <- test[, -colnames(train[,nearZeroVar(train)])]
save(train, file = "./files/train1.Rda")
save(test, file = "./files/test1.Rda")
library(caret)
train <- train[, -nearZeroVar(train)]
test <- test[, -colnames(train[,nearZeroVar(train)])]
save(train, file = "./files/train1.Rda")
save(test, file = "./files/test1.Rda")
nearZeroVar(train)
train <- read.csv("./data/train.csv", stringsAsFactors = FALSE)
test <- read.csv("./data/test.csv", stringsAsFactors = FALSE)
summary(train)
str(train)
dim(train)
log(1)
head(train)
nas <- apply(train, 2,function(x)sum(is.na(x))/length(x))
nam <- as.character(names(train))
length(nam)
length(nas)
names(nas) <- nam
nas <- nas[nas < 0.5]
nas
train <- train[,names(nas)]
test <- test[,names(nas)[-length(nas)]]
# Remove duplicates
###########################################
train <- unique(train)
# NAs treatment
###########################################
head(train$FireplaceQu)
head(train$Fireplaces)
train$FireplaceQu[is.na(train$FireplaceQu)] <- "None"
test$FireplaceQu[is.na(test$FireplaceQu)] <- "None"
head(train$LotFrontage,20)
summary(train$LotFrontage)
head(train$LotArea,20)
train$LotFrontage[is.na(train$LotFrontage)] <- mean(train$LotFrontage, na.rm = TRUE)
test$LotFrontage[is.na(test$LotFrontage)] <- mean(test$LotFrontage, na.rm = TRUE)
head(train$MasVnrType,50)
head(train$MasVnrArea,50)
train$MasVnrType[is.na(train$MasVnrType)] <- "None"
train$MasVnrArea[is.na(train$MasVnrArea)] <- 0
test$MasVnrType[is.na(test$MasVnrType)] <- "None"
test$MasVnrArea[is.na(test$MasVnrArea)] <- 0
head(train$BsmtQual)
str(train$BsmtQual)
head(train$BsmtCond)
train$BsmtQual[is.na(train$BsmtQual)] <- "None"
train$BsmtCond[is.na(train$BsmtCond)] <- "None"
train$BsmtExposure[is.na(train$BsmtExposure)] <- "None"
train$BsmtFinType1[is.na(train$BsmtFinType1)] <- "None"
train$BsmtFinType2[is.na(train$BsmtFinType2)] <- "None"
test$BsmtQual[is.na(test$BsmtQual)] <- "None"
test$BsmtCond[is.na(test$BsmtCond)] <- "None"
test$BsmtExposure[is.na(test$BsmtExposure)] <- "None"
test$BsmtFinType1[is.na(test$BsmtFinType1)] <- "None"
test$BsmtFinType2[is.na(test$BsmtFinType2)] <- "None"
head(train$Electrical)
train$Electrical[is.na(train$Electrical)] <- "None"
test$Electrical[is.na(test$Electrical)] <- "None"
head(train$GarageType)
train$GarageType[is.na(train$GarageType)] <- "None"
test$GarageType[is.na(test$GarageType)] <- "None"
head(train$GarageCars)
train$GarageCars[is.na(train$GarageCars)] <- 0
test$GarageCars[is.na(test$GarageCars)] <- 0
head(train$GarageArea)
train$GarageArea[is.na(train$GarageArea)] <- 0
test$GarageArea[is.na(test$GarageArea)] <- 0
head(train$GarageQual)
train$GarageQual[is.na(train$GarageQual)] <- "None"
test$GarageQual[is.na(test$GarageQual)] <- "None"
head(train$GarageCond)
train$GarageCond[is.na(train$GarageCond)] <- "None"
test$GarageCond[is.na(test$GarageCond)] <- "None"
head(train$GarageYrBlt)
train$GarageYrBlt[is.na(train$GarageYrBlt)] <- median(train$GarageYrBlt, na.rm = TRUE)
test$GarageYrBlt[is.na(test$GarageYrBlt)] <- median(test$GarageYrBlt, na.rm = TRUE)
head(train$GarageFinish)
train$GarageFinish[is.na(train$GarageFinish)] <- "None"
test$GarageFinish[is.na(test$GarageFinish)] <- "None"
nas2 <- apply(train, 2,function(x)sum(is.na(x))/length(x))
nas2[nas2 >0]
nas2 <- apply(test, 2,function(x)sum(is.na(x))/length(x))
nas2[nas2 >0]
# Imputation test
test[is.na(test$BsmtFinSF1), c("BsmtFinSF1" ,  "BsmtFinSF2",   "BsmtUnfSF",  "TotalBsmtSF", "BsmtFullBath",  "BsmtHalfBath")] <- 0
test[is.na(test$BsmtFullBath), c("BsmtFullBath","BsmtHalfBath")] <- 0
train <- train[, -nearZeroVar(train)]
test <- test[, -colnames(train[,nearZeroVar(train)])]
train <- read.csv("./data/train.csv", stringsAsFactors = FALSE)
test <- read.csv("./data/test.csv", stringsAsFactors = FALSE)
summary(train)
str(train)
dim(train)
log(1)
head(train)
nas <- apply(train, 2,function(x)sum(is.na(x))/length(x))
nam <- as.character(names(train))
length(nam)
length(nas)
names(nas) <- nam
nas <- nas[nas < 0.5]
nas
train <- train[,names(nas)]
test <- test[,names(nas)[-length(nas)]]
# Remove duplicates
###########################################
train <- unique(train)
# NAs treatment
###########################################
head(train$FireplaceQu)
head(train$Fireplaces)
train$FireplaceQu[is.na(train$FireplaceQu)] <- "None"
test$FireplaceQu[is.na(test$FireplaceQu)] <- "None"
head(train$LotFrontage,20)
summary(train$LotFrontage)
head(train$LotArea,20)
train$LotFrontage[is.na(train$LotFrontage)] <- mean(train$LotFrontage, na.rm = TRUE)
test$LotFrontage[is.na(test$LotFrontage)] <- mean(test$LotFrontage, na.rm = TRUE)
head(train$MasVnrType,50)
head(train$MasVnrArea,50)
train$MasVnrType[is.na(train$MasVnrType)] <- "None"
train$MasVnrArea[is.na(train$MasVnrArea)] <- 0
test$MasVnrType[is.na(test$MasVnrType)] <- "None"
test$MasVnrArea[is.na(test$MasVnrArea)] <- 0
head(train$BsmtQual)
str(train$BsmtQual)
head(train$BsmtCond)
train$BsmtQual[is.na(train$BsmtQual)] <- "None"
train$BsmtCond[is.na(train$BsmtCond)] <- "None"
train$BsmtExposure[is.na(train$BsmtExposure)] <- "None"
train$BsmtFinType1[is.na(train$BsmtFinType1)] <- "None"
train$BsmtFinType2[is.na(train$BsmtFinType2)] <- "None"
test$BsmtQual[is.na(test$BsmtQual)] <- "None"
test$BsmtCond[is.na(test$BsmtCond)] <- "None"
test$BsmtExposure[is.na(test$BsmtExposure)] <- "None"
test$BsmtFinType1[is.na(test$BsmtFinType1)] <- "None"
test$BsmtFinType2[is.na(test$BsmtFinType2)] <- "None"
head(train$Electrical)
train$Electrical[is.na(train$Electrical)] <- "None"
test$Electrical[is.na(test$Electrical)] <- "None"
head(train$GarageType)
train$GarageType[is.na(train$GarageType)] <- "None"
test$GarageType[is.na(test$GarageType)] <- "None"
head(train$GarageCars)
train$GarageCars[is.na(train$GarageCars)] <- 0
test$GarageCars[is.na(test$GarageCars)] <- 0
head(train$GarageArea)
train$GarageArea[is.na(train$GarageArea)] <- 0
test$GarageArea[is.na(test$GarageArea)] <- 0
head(train$GarageQual)
train$GarageQual[is.na(train$GarageQual)] <- "None"
test$GarageQual[is.na(test$GarageQual)] <- "None"
head(train$GarageCond)
train$GarageCond[is.na(train$GarageCond)] <- "None"
test$GarageCond[is.na(test$GarageCond)] <- "None"
head(train$GarageYrBlt)
train$GarageYrBlt[is.na(train$GarageYrBlt)] <- median(train$GarageYrBlt, na.rm = TRUE)
test$GarageYrBlt[is.na(test$GarageYrBlt)] <- median(test$GarageYrBlt, na.rm = TRUE)
head(train$GarageFinish)
train$GarageFinish[is.na(train$GarageFinish)] <- "None"
test$GarageFinish[is.na(test$GarageFinish)] <- "None"
nas2 <- apply(train, 2,function(x)sum(is.na(x))/length(x))
nas2[nas2 >0]
nas2 <- apply(test, 2,function(x)sum(is.na(x))/length(x))
nas2[nas2 >0]
# Imputation test
test[is.na(test$BsmtFinSF1), c("BsmtFinSF1" ,  "BsmtFinSF2",   "BsmtUnfSF",  "TotalBsmtSF", "BsmtFullBath",  "BsmtHalfBath")] <- 0
test[is.na(test$BsmtFullBath), c("BsmtFullBath","BsmtHalfBath")] <- 0
nz <- colnames(train[,nearZeroVar(train)])
train <- train[, -nz]
test <- test[, -nz]
nz
train <- train[, -nz]
train <- train[, !nz]
nz
train[, nz]
train[, -nz]
train[, -c(nz)]
train <- train[, !names(train) %in nz]
train <- train[, !names(train) %in% nz]
test <- test[, !names(test) %in% nz]
save(train, file = "./files/train1.Rda")
save(test, file = "./files/test1.Rda")
ggplot(data=samp_train, aes(x=GrLivArea, y=SalePrice, color = YrSold-YearBuilt)) +
geom_point(aes(size=GarageCars)) + scale_colour_gradientn(colours=c("blue", "green"))
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
load("./files/train1.Rda")
colnames(train[,nearZeroVar(train)])
samp_train <- train[1:700,]
# samp_train <- samp_train[, MSZoning == 'A']
samp_train$SalePrice <- log(samp_train$SalePrice + 1)
# Use the original data frame, but put factor() directly in the plot specification
ggplot(data=samp_train, aes(x=YrSold, y=SalePrice, color = YrSold-YearBuilt)) +
geom_point(aes(size=GrLivArea))+ stat_smooth() + scale_colour_gradientn(colours=c("red", "black"))
samp1 <- train[train$YrSold == 2007, -nearZeroVar(train)]
colnames(samp1)
h <- head(samp1[order(samp1$SalePrice, decreasing = TRUE),], 10)
h1 <- apply(h,2, getmode)
t <- tail(samp1[order(samp1$SalePrice, decreasing = TRUE),], 10)
t1 <- apply(t,2, getmode)
getmode(h$MSZoning)
ggplot(data=samp_train, aes(x=GrLivArea, y=SalePrice, color = YrSold-YearBuilt)) +
geom_point(aes(size=GarageCars)) + scale_colour_gradientn(colours=c("blue", "green"))
ggplot(data=samp_train, aes(x=GrLivArea, y=SalePrice, color = YrSold-YearBuilt)) +
geom_point() + scale_colour_gradientn(colours=c("blue", "green"))
names(train)
train$YearRemodAdd
names(train)
train[train$YearRemodAd < 1000,]
head(train$YearRemodAdd, 20)
head(train$YearBuilt, 20)
train$remodeled <- ifelse(train$YearRemodAdd-train$YearBuilt > 0, "yes", "no")
table(train[,c(SalePrice, remodeled)])
table(train[,c("SalePrice", "remodeled")])
library(dplyr)
grouped <- group_by(train$remodeled)
grouped <- group_by(train, remodeled)
summarise(grouped, mean=mean(SalePrice), sd=sd(SalePrice))
train$age <- train$YrSold-train$YearBuilt
grouped <- group_by(train, remodeled, age)
summarise(grouped, mean=mean(SalePrice), sd=sd(SalePrice))
summarise(grouped, mean=mean(SalePrice))
res <- summarise(grouped, mean=mean(SalePrice))
ggplot(data=res, aes(x=age, y=mean, color = remodeled)) +
geom_point()
ggplot(data=res, aes(x=age, y=mean, color = remodeled)) +
geom_point(aes(size=GrLivArea))
ggplot(data=res, aes(x=age, y=mean, color = remodeled)) +
geom_point()
names(train)
head(train$OverallQual)
ggplot(data=res, aes(x=OverallCond, y=OverallQual)) +
geom_point()
ggplot(data=train, aes(x=OverallCond, y=OverallQual)) +
geom_point()
grouped <- group_by(train, OverallCond, OverallQual)
ggplot(data=res, aes(x=OverallCond, y=mean, color = OverallQual)) +
geom_point()
res <- summarise(grouped, mean=mean(SalePrice))
ggplot(data=res, aes(x=OverallCond, y=mean, color = OverallQual)) +
geom_point()
ggplot(data=train, aes(x=OverallCond, y=OverallQual)) +
geom_point()
ggplot(data=train, aes(x=OverallCond, y=OverallQual, color = SalePrice)) +
geom_point()+ scale_colour_gradientn(colours=c("blue", "green"))
hist(train$OverallCond)
hist(train$OverallCond*train$OverallQual)
hist(log(train$OverallCond*train$OverallQual+1))
hist(log(train$OverallCond*train$OverallQual))
hist(train$OverallCond*train$OverallQual)
hist(train$OverallCond*train$OverallQual,20)
ggplot(data=samp_train, aes(x=GrLivArea, y=SalePrice, color = train$OverallCond*train$OverallQual)) +
geom_point() + scale_colour_gradientn(colours=c("blue", "green"))
ggplot(data=samp_train, aes(x=GrLivArea, y=SalePrice, color = (train$OverallCond*train$OverallQual))) +
geom_point() + scale_colour_gradientn(colours=c("blue", "green"))
train[train$OverallCond == 0, ]
train[train$OverallQual == 0, ]
ggplot(data=train, aes(x=GrLivArea, y=SalePrice, color = train$OverallCond*train$OverallQual)) +
geom_point() + scale_colour_gradientn(colours=c("blue", "green"))
ggplot(data=train, aes(x=LotArea, y=SalePrice, color = train$OverallCond*train$OverallQual)) +
geom_point() + scale_colour_gradientn(colours=c("blue", "green"))
ggplot(data=train, aes(x=GarageArea, y=SalePrice, color = train$OverallCond*train$OverallQual)) +
geom_point() + scale_colour_gradientn(colours=c("blue", "green"))
ggplot(data=train, aes(x=GrLivArea, y=SalePrice, color = train$OverallCond*train$OverallQual)) +
geom_point() + scale_colour_gradientn(colours=c("blue", "green"))
ggplot(data=train, aes(x=GrLivArea, y=SalePrice, color = log(train$OverallCond*train$OverallQual))) +
geom_point() + scale_colour_gradientn(colours=c("blue", "green"))
