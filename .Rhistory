train$GarageCars[is.na(train$GarageCars)] <- 0
test$GarageCars[is.na(test$GarageCars)] <- 0
head(train$GarageArea)
train$GarageArea[is.na(train$GarageArea)] <- 0
test$GarageArea[is.na(test$GarageArea)] <- 0
head(train$GarageQual)
train$GarageQual[is.na(train$GarageQual)] <- "None"
test$GarageQual[is.na(test$GarageQual)] <- "None"
head(train$GarageCond)
train$GarageCond[is.na(train$GarageCond)] <- "None"
test$GarageCond[is.na(test$GarageCond)] <- "None"
head(train$GarageYrBlt)
train$GarageYrBlt[is.na(train$GarageYrBlt)] <- min(train$GarageYrBlt, na.rm = TRUE)
test$GarageYrBlt[is.na(test$GarageYrBlt)] <- min(test$GarageYrBlt, na.rm = TRUE)
head(train$GarageFinish)
train$GarageFinish[is.na(train$GarageFinish)] <- "None"
test$GarageFinish[is.na(test$GarageFinish)] <- "None"
nas2 <- apply(train, 2,function(x)sum(is.na(x))/length(x))
nas2[nas2 >0]
nas2 <- apply(test, 2,function(x)sum(is.na(x))/length(x))
nas2[nas2 >0]
# Imputation test
test[is.na(test$BsmtFinSF1), c("BsmtFinSF1" ,  "BsmtFinSF2",   "BsmtUnfSF",  "TotalBsmtSF", "BsmtFullBath",  "BsmtHalfBath")] <- 0
test[is.na(test$BsmtFullBath), c("BsmtFullBath","BsmtHalfBath")] <- 0
table(test$Fireplaces, test$FireplaceQu, exclude = NULL)
aux <- table(train$Neighborhood, train$MSZoning)
aux <- data.frame(neighbourhood = rownames(aux), cols = colnames(aux)[apply(aux,1,which.max)])
test[is.na(test$MSZoning), "MSZoning"] <-  sapply(test[is.na(test$MSZoning), "Neighborhood"], function(x)aux[aux$neighbourhood == x,"cols"])
aux <- table(train$Neighborhood, train$Exterior1st)
aux <- data.frame(Neighborhood = rownames(aux), cols = colnames(aux)[apply(aux,1,which.max)])
test[is.na(test$Exterior1st), "Exterior1st"] <-  sapply(test[is.na(test$Exterior1st), "Neighborhood"], function(x)aux[aux$Neighborhood == x,"cols"])
aux <- table(train$Neighborhood, train$Exterior2nd)
aux <- data.frame(Neighborhood = rownames(aux), cols = colnames(aux)[apply(aux,1,which.max)])
test[is.na(test$Exterior2nd), "Exterior2nd"] <-  sapply(test[is.na(test$Exterior2nd), "Neighborhood"], function(x)aux[aux$Neighborhood == x,"cols"])
table(train$SaleCondition, train$SaleType)
test[is.na(test$SaleType), "SaleType"] <- "WD"
table(test$OverallQual, test$KitchenQual, exclude = NULL)
test[is.na(test$KitchenQual), "KitchenQual"] <-  "TA"
nz <- colnames(train[,nearZeroVar(train)])
train <- train[, !names(train) %in% nz]
test <- test[, !names(test) %in% nz]
train <- train[train$GrLivArea < 4000,]
save(train, file = "./files/train1.Rda")
save(test, file = "./files/test1.Rda")
load("./files/train1.Rda")
load("./files/test1.Rda")
y <- train$SalePrice
data <- rbind(train[, !(names(train) %in% 'SalePrice')], test)
# Ordinal Categories
#############################################################################################################
data$GarageQual <- factor(data$GarageQual, levels = c("None", "Po", "Fa", "TA", "Gd", "Ex"))
data$GarageQual <- as.numeric(data$GarageQual)
data$GarageCond <- factor(data$GarageCond, levels = c("None", "Po", "Fa", "TA", "Gd", "Ex"))
data$GarageCond <- as.numeric(data$GarageCond)
data$GarageFinish <- factor(data$GarageFinish, levels = c("None", "Unf", "RFn", "Fin"))
data$GarageFinish <- as.numeric(data$GarageFinish)
data$PavedDrive <- factor(data$PavedDrive, levels = c("N", "P", "Y"))
data$PavedDrive <- as.numeric(data$PavedDrive)
data$BsmtQual <- factor(data$BsmtQual, levels = c("None", "Po", "Fa", "TA", "Gd", "Ex"))
data$BsmtQual <- as.numeric(data$BsmtQual)
data$BsmtExposure <- factor(data$BsmtExposure, levels = c("None", "No", "Mn", "Av", "Gd"))
data$BsmtExposure <- as.numeric(data$BsmtExposure)
data$BsmtFinType1 <- factor(data$BsmtFinType1, levels = c("None", "Unf", "LwQ", "Rec", "BLQ", "ALQ", "GLQ"))
data$BsmtFinType1 <- as.numeric(data$BsmtFinType1)
data$ExterQual <- factor(data$ExterQual, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
data$ExterQual <- as.numeric(data$ExterQual)
data$ExterCond <- factor(data$ExterCond, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
data$ExterCond <- as.numeric(data$ExterCond)
data$FireplaceQu <- factor(data$FireplaceQu, levels = c("None","Po", "Fa", "TA", "Gd", "Ex"))
data$FireplaceQu <- as.numeric(data$FireplaceQu)
data$HeatingQC <- factor(data$HeatingQC, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
data$HeatingQC <- as.numeric(data$HeatingQC)
data$CentralAir <- factor(data$CentralAir, levels = c("N", "Y"))
data$CentralAir <- as.numeric(data$CentralAir)
data$Electrical <- factor(data$Electrical, levels = c("Mix", "FuseP", "FuseF", "FuseA", "SBrkr"))
data$Electrical <- as.numeric(data$Electrical)
data$KitchenQual <- factor(data$KitchenQual, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
data$KitchenQual <- as.numeric(data$KitchenQual)
# Nominal Categories
#############################################################################################################
exc <- c("GarageQual", "GarageCond", "GarageFinish", "PavedDrive", "BsmtQual", "BsmtExposure", "BsmtFinType1", "ExterQual",
"ExterCond", "FireplaceQu", "HeatingQC", "CentralAir", "Electrical", "KitchenQual")
cat <- data[, sapply(data, is.character)]
cat <- cat[, !(names(cat) %in% exc)]
cat$MSZoning[!(cat$MSZoning %in% c("FV", "RH", "RL", "RM"))] <- "other"
cat$LotShape[!(cat$LotShape %in% c("Reg"))] <- "IR"
cat$LotConfig[!(cat$LotConfig %in% c("Inside"))] <- "other"
cat$Condition1[!(cat$Condition1 %in% c("Norm", "Artery", "Feedr"))] <- "faci"
cat$BldgType[!(cat$BldgType %in% c("1Fam"))] <- "other"
cat$HouseStyle[(cat$HouseStyle %in% c("1.5Fin", "1.5Unf"))] <- "1Story"
cat$HouseStyle[(cat$HouseStyle %in% c("2.5Fin", "2.5Unf", "SFoyer", "SLvl"))] <- "2Story"
cat$RoofStyle[!(cat$RoofStyle %in% c("Gable", "Hip"))] <- "other"
cat$Exterior1st[!(cat$Exterior1st %in% c("HdBoard", "MetalSd", "Plywood", "VinylSd", "Wd Sdng"))] <- "other"
cat$Exterior2nd[!(cat$Exterior2nd %in% c("HdBoard", "MetalSd", "Plywood", "VinylSd", "Wd Sdng"))] <- "other"
cat$MasVnrType[!(cat$MasVnrType %in% c("None", "Stone"))] <- "Brk"
cat$Foundation[(cat$Foundation %in% c("Slab", "Stone", "Wood"))] <- "other"
cat$GarageType[(cat$GarageType %in% c("2Types", "Basment", "CarPort"))] <- "other"
cat$SaleType[!(cat$SaleType %in% c("New", "WD"))] <- "other"
cat$SaleCondition[!(cat$SaleCondition %in% c("Abnorml", "Normal", "Partial"))] <- "other"
# cat$MSSubClass <- factor(data$MSSubClass)
cat$MoSold <- factor(data$MoSold)
cat$YrSold <- factor(data$YrSold)
exc <- names(cat)
dum <- dummyVars(~., data = cat)
cat <- data.frame(predict(dum, newdata = cat))
# nz <- colnames(cat[,nearZeroVar(cat)])
# cat <- cat[, !names(cat) %in% nz]
# Numerics
#############################################################################################################
# num <- data[, sapply(data, is.numeric)]
# names(num)
# num <- num[,!(names(num) %in% c("Id", "MSSubClass", "MoSold", "YrSold", "age", "epoch", "GarageYrBlt", "YearBuilt", "YearRemodAdd"))]
# num <- num[, sapply(num, function(x) {range(x)[2]-range(x)[1]>30})]
# num_col <- sapply(names(num), function(x) paste0(x, "_2"))
# num <- data.frame(sapply(num, function(x) x^2))
# names(num) <- num_col
# data <- cbind(data,num)
data$remodeled <- ifelse(data$YearRemodAdd-data$YearBuilt > 0, 1, 0)
data$age <- ifelse(data$YearRemodAdd-data$YearBuilt > 0,
data$YrSold-data$YearRemodAdd, data$YrSold-data$YearBuilt)
data$garage_age <- data$YrSold-data$GarageYrBlt
data$epoch <- ifelse(data$YrSold-data$YearBuilt >100, 2,ifelse(data$YrSold-data$YearBuilt >50, 1,0))
data$OverallCond <- ifelse(data$OverallCond> 5, 1, ifelse(data$OverallCond< 5, -1,0))
data$OverallQual <- ifelse((data$OverallQual+data$OverallCond) < 0, 0,(data$OverallQual+data$OverallCond))
data$GarageCond <- ifelse(data$GarageCond> 4, 1, ifelse(data$GarageCond< 4, -1,0))
data$GarageQual <- ifelse((data$GarageQual+data$GarageCond) < 0, 0,(data$GarageQual+data$GarageCond))
data$ExterCond <- ifelse(data$ExterCond> 3, 1, ifelse(data$ExterCond< 3, -1,0))
data$ExterQual <- ifelse((data$ExterQual+data$ExterCond) < 0, 0,(data$ExterQual+data$ExterCond))
data$Fireplaces <- ifelse(data$Fireplaces > 1, 2, data$Fireplaces)
data$bathRoomRel <-  data$TotRmsAbvGrd- data$HalfBath+data$FullBath
data <- data[, !(names(data) %in% c("GarageYrBlt", "YearBuilt", "YearRemodAdd",
"OverallCond", "GarageCond", "BsmtCond", "ExterCond" ))]
data <- data <- data[, !(names(data) %in% exc)]
data <- cbind(data, cat)
train_tot <- data[1:nrow(train),]
train_tot$SalePrice <- log(y+1)
train_tot <- train_tot[,-1]
sum(sapply(train_tot, class) != "numeric")
train_tot <- as.data.frame(sapply(train_tot, as.numeric))
test_tot <- data[(nrow(train)+1):nrow(data),]
train_tot2 <- train_tot1
train_tot1 <- train_tot[ind,]
train_tot <- train_tot[!(row.names(train_tot) %in% ind),]
CARET.TRAIN.CTRL <- trainControl(method="repeatedcv",
number=10,
repeats=10,
verboseIter=FALSE)
lambdas <- seq(1,0,-0.001)
# train model
set.seed(123)  # for reproducibility
model_ridge <- train(SalePrice ~ .,
data = train_tot,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=0, # Ridge regression
lambda=lambdas))
ggplot(data=filter(model_ridge$result,RMSE<0.14)) +
geom_line(aes(x=lambda,y=RMSE))
mean(model_ridge$resample$RMSE)
ridge_pred <- predict(model_ridge,newdata= train_tot1)
set.seed(123)  # for reproducibility
model_lasso <- train(SalePrice ~ .,
data = train_tot,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=1,  # Lasso regression
lambda=c(1,0.1,0.05,0.01,seq(0.009,0.001,-0.001),
0.00075,0.0005,0.0001)))
ggplot(data=filter(model_lasso$result,RMSE<0.14)) +
geom_line(aes(x=lambda,y=RMSE))
mean(model_lasso$resample$RMSE)
lasso_pred <- predict(model_lasso,newdata= train_tot1)
train_tot2$ridge_pred1 <-  ridge_pred
train_tot2$lasso_pred1 <-  lasso_pred
ridge_pred <- predict(model_ridge,newdata= train_tot2)
lasso_pred <- predict(model_lasso,newdata= train_tot2)
train_tot2$ridge_pred1 <-  ridge_pred
train_tot2$lasso_pred1 <-  lasso_pred
train_x <- train_tot2[, !(names(train_tot2) %in% c("Id", "SalePrice"))]
y_train <- train_tot2$SalePrice
xgb_train <- xgb.DMatrix(model.matrix(~., data = train_x),
label=y_train, missing=NA)
history <- xgb.cv(data = xgb_train, nround=800, nthread = 6, nfold = 10, metrics=list("rmse"),
max.depth =6, eta = 0.021, gamma = 0.025, colsample_bytree = 0.2,  objective = "reg:linear")
history <- xgb.cv(data = xgb_train, nround=800, nthread = 6, nfold = 10, metrics=list("rmse"),
max.depth =6, eta = 0.01, gamma = 0.025, colsample_bytree = 0.2,  objective = "reg:linear")
history <- xgb.cv(data = xgb_train, nround=800, nthread = 6, nfold = 10, metrics=list("rmse"),
max.depth =6, eta = 0.03, gamma = 0.025, colsample_bytree = 0.2,  objective = "reg:linear")
setwd("C:/Users/tiago_000/Documents/GitHub/Kaggle_House_Prices_AGT")
library(caret)
train <- read.csv("./data/train.csv", stringsAsFactors = FALSE)
test <- read.csv("./data/test.csv", stringsAsFactors = FALSE)
summary(train)
str(train)
dim(train)
log(1)
head(train)
nas <- apply(train, 2,function(x)sum(is.na(x))/length(x))
nam <- as.character(names(train))
length(nam)
length(nas)
names(nas) <- nam
nas <- nas[nas < 0.5]
nas
train <- train[,names(nas)]
test <- test[,names(nas)[-length(nas)]]
# Remove duplicates
###########################################
train <- unique(train)
# NAs treatment
###########################################
head(train$FireplaceQu)
head(train$Fireplaces)
train$FireplaceQu[is.na(train$FireplaceQu)] <- "None"
test$FireplaceQu[is.na(test$FireplaceQu)] <- "None"
head(train$LotFrontage,20)
summary(train$LotFrontage)
head(train$LotArea,20)
train$LotFrontage[is.na(train$LotFrontage)] <- mean(train$LotFrontage, na.rm = TRUE)
test$LotFrontage[is.na(test$LotFrontage)] <- mean(test$LotFrontage, na.rm = TRUE)
head(train$MasVnrType,50)
head(train$MasVnrArea,50)
train$MasVnrType[is.na(train$MasVnrType)] <- "None"
train$MasVnrArea[is.na(train$MasVnrArea)] <- 0
test$MasVnrType[is.na(test$MasVnrType)] <- "None"
test$MasVnrArea[is.na(test$MasVnrArea)] <- 0
head(train$BsmtQual)
str(train$BsmtQual)
head(train$BsmtCond)
train$BsmtQual[is.na(train$BsmtQual)] <- "None"
train$BsmtCond[is.na(train$BsmtCond)] <- "None"
train$BsmtExposure[is.na(train$BsmtExposure)] <- "None"
train$BsmtFinType1[is.na(train$BsmtFinType1)] <- "None"
train$BsmtFinType2[is.na(train$BsmtFinType2)] <- "None"
test$BsmtQual[is.na(test$BsmtQual)] <- "None"
test$BsmtCond[is.na(test$BsmtCond)] <- "None"
test$BsmtExposure[is.na(test$BsmtExposure)] <- "None"
test$BsmtFinType1[is.na(test$BsmtFinType1)] <- "None"
test$BsmtFinType2[is.na(test$BsmtFinType2)] <- "None"
head(train$Electrical)
train$Electrical[is.na(train$Electrical)] <- "SBrkr"
test$Electrical[is.na(test$Electrical)] <- "SBrkr"
head(train$GarageType)
train$GarageType[is.na(train$GarageType)] <- "None"
test$GarageType[is.na(test$GarageType)] <- "None"
head(train$GarageCars)
train$GarageCars[is.na(train$GarageCars)] <- 0
test$GarageCars[is.na(test$GarageCars)] <- 0
head(train$GarageArea)
train$GarageArea[is.na(train$GarageArea)] <- 0
test$GarageArea[is.na(test$GarageArea)] <- 0
head(train$GarageQual)
train$GarageQual[is.na(train$GarageQual)] <- "None"
test$GarageQual[is.na(test$GarageQual)] <- "None"
head(train$GarageCond)
train$GarageCond[is.na(train$GarageCond)] <- "None"
test$GarageCond[is.na(test$GarageCond)] <- "None"
head(train$GarageYrBlt)
train$GarageYrBlt[is.na(train$GarageYrBlt)] <- min(train$GarageYrBlt, na.rm = TRUE)
test$GarageYrBlt[is.na(test$GarageYrBlt)] <- min(test$GarageYrBlt, na.rm = TRUE)
head(train$GarageFinish)
train$GarageFinish[is.na(train$GarageFinish)] <- "None"
test$GarageFinish[is.na(test$GarageFinish)] <- "None"
nas2 <- apply(train, 2,function(x)sum(is.na(x))/length(x))
nas2[nas2 >0]
nas2 <- apply(test, 2,function(x)sum(is.na(x))/length(x))
nas2[nas2 >0]
# Imputation test
test[is.na(test$BsmtFinSF1), c("BsmtFinSF1" ,  "BsmtFinSF2",   "BsmtUnfSF",  "TotalBsmtSF", "BsmtFullBath",  "BsmtHalfBath")] <- 0
test[is.na(test$BsmtFullBath), c("BsmtFullBath","BsmtHalfBath")] <- 0
table(test$Fireplaces, test$FireplaceQu, exclude = NULL)
aux <- table(train$Neighborhood, train$MSZoning)
aux <- data.frame(neighbourhood = rownames(aux), cols = colnames(aux)[apply(aux,1,which.max)])
test[is.na(test$MSZoning), "MSZoning"] <-  sapply(test[is.na(test$MSZoning), "Neighborhood"], function(x)aux[aux$neighbourhood == x,"cols"])
aux <- table(train$Neighborhood, train$Exterior1st)
aux <- data.frame(Neighborhood = rownames(aux), cols = colnames(aux)[apply(aux,1,which.max)])
test[is.na(test$Exterior1st), "Exterior1st"] <-  sapply(test[is.na(test$Exterior1st), "Neighborhood"], function(x)aux[aux$Neighborhood == x,"cols"])
aux <- table(train$Neighborhood, train$Exterior2nd)
aux <- data.frame(Neighborhood = rownames(aux), cols = colnames(aux)[apply(aux,1,which.max)])
test[is.na(test$Exterior2nd), "Exterior2nd"] <-  sapply(test[is.na(test$Exterior2nd), "Neighborhood"], function(x)aux[aux$Neighborhood == x,"cols"])
table(train$SaleCondition, train$SaleType)
test[is.na(test$SaleType), "SaleType"] <- "WD"
table(test$OverallQual, test$KitchenQual, exclude = NULL)
test[is.na(test$KitchenQual), "KitchenQual"] <-  "TA"
nz <- colnames(train[,nearZeroVar(train)])
train <- train[, !names(train) %in% nz]
test <- test[, !names(test) %in% nz]
# train <- train[train$GrLivArea < 4000,]
save(train, file = "./files/train1.Rda")
save(test, file = "./files/test1.Rda")
library(ggplot2)
library(caret)
library(dplyr)
library(corrplot)
library(zoo)
library(xgboost)
library(gdata)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
load("./files/train1.Rda")
load("./files/test1.Rda")
y <- train$SalePrice
data <- rbind(train[, !(names(train) %in% 'SalePrice')], test)
# Ordinal Categories
#############################################################################################################
data$GarageQual <- factor(data$GarageQual, levels = c("None", "Po", "Fa", "TA", "Gd", "Ex"))
data$GarageQual <- as.numeric(data$GarageQual)
data$GarageCond <- factor(data$GarageCond, levels = c("None", "Po", "Fa", "TA", "Gd", "Ex"))
data$GarageCond <- as.numeric(data$GarageCond)
data$GarageFinish <- factor(data$GarageFinish, levels = c("None", "Unf", "RFn", "Fin"))
data$GarageFinish <- as.numeric(data$GarageFinish)
data$PavedDrive <- factor(data$PavedDrive, levels = c("N", "P", "Y"))
data$PavedDrive <- as.numeric(data$PavedDrive)
data$BsmtQual <- factor(data$BsmtQual, levels = c("None", "Po", "Fa", "TA", "Gd", "Ex"))
data$BsmtQual <- as.numeric(data$BsmtQual)
data$BsmtExposure <- factor(data$BsmtExposure, levels = c("None", "No", "Mn", "Av", "Gd"))
data$BsmtExposure <- as.numeric(data$BsmtExposure)
data$BsmtFinType1 <- factor(data$BsmtFinType1, levels = c("None", "Unf", "LwQ", "Rec", "BLQ", "ALQ", "GLQ"))
data$BsmtFinType1 <- as.numeric(data$BsmtFinType1)
data$ExterQual <- factor(data$ExterQual, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
data$ExterQual <- as.numeric(data$ExterQual)
data$ExterCond <- factor(data$ExterCond, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
data$ExterCond <- as.numeric(data$ExterCond)
data$FireplaceQu <- factor(data$FireplaceQu, levels = c("None","Po", "Fa", "TA", "Gd", "Ex"))
data$FireplaceQu <- as.numeric(data$FireplaceQu)
data$HeatingQC <- factor(data$HeatingQC, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
data$HeatingQC <- as.numeric(data$HeatingQC)
data$CentralAir <- factor(data$CentralAir, levels = c("N", "Y"))
data$CentralAir <- as.numeric(data$CentralAir)
data$Electrical <- factor(data$Electrical, levels = c("Mix", "FuseP", "FuseF", "FuseA", "SBrkr"))
data$Electrical <- as.numeric(data$Electrical)
data$KitchenQual <- factor(data$KitchenQual, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
data$KitchenQual <- as.numeric(data$KitchenQual)
# Nominal Categories
#############################################################################################################
exc <- c("GarageQual", "GarageCond", "GarageFinish", "PavedDrive", "BsmtQual", "BsmtExposure", "BsmtFinType1", "ExterQual",
"ExterCond", "FireplaceQu", "HeatingQC", "CentralAir", "Electrical", "KitchenQual")
cat <- data[, sapply(data, is.character)]
cat <- cat[, !(names(cat) %in% exc)]
cat$MSZoning[!(cat$MSZoning %in% c("FV", "RH", "RL", "RM"))] <- "other"
cat$LotShape[!(cat$LotShape %in% c("Reg"))] <- "IR"
cat$LotConfig[!(cat$LotConfig %in% c("Inside"))] <- "other"
cat$Condition1[!(cat$Condition1 %in% c("Norm", "Artery", "Feedr"))] <- "faci"
cat$BldgType[!(cat$BldgType %in% c("1Fam"))] <- "other"
cat$HouseStyle[(cat$HouseStyle %in% c("1.5Fin", "1.5Unf"))] <- "1Story"
cat$HouseStyle[(cat$HouseStyle %in% c("2.5Fin", "2.5Unf", "SFoyer", "SLvl"))] <- "2Story"
cat$RoofStyle[!(cat$RoofStyle %in% c("Gable", "Hip"))] <- "other"
cat$Exterior1st[!(cat$Exterior1st %in% c("HdBoard", "MetalSd", "Plywood", "VinylSd", "Wd Sdng"))] <- "other"
cat$Exterior2nd[!(cat$Exterior2nd %in% c("HdBoard", "MetalSd", "Plywood", "VinylSd", "Wd Sdng"))] <- "other"
cat$MasVnrType[!(cat$MasVnrType %in% c("None", "Stone"))] <- "Brk"
cat$Foundation[(cat$Foundation %in% c("Slab", "Stone", "Wood"))] <- "other"
cat$GarageType[(cat$GarageType %in% c("2Types", "Basment", "CarPort"))] <- "other"
cat$SaleType[!(cat$SaleType %in% c("New", "WD"))] <- "other"
cat$SaleCondition[!(cat$SaleCondition %in% c("Abnorml", "Normal", "Partial"))] <- "other"
# cat$MSSubClass <- factor(data$MSSubClass)
cat$MoSold <- factor(data$MoSold)
cat$YrSold <- factor(data$YrSold)
exc <- names(cat)
dum <- dummyVars(~., data = cat)
cat <- data.frame(predict(dum, newdata = cat))
# nz <- colnames(cat[,nearZeroVar(cat)])
# cat <- cat[, !names(cat) %in% nz]
# Numerics
#############################################################################################################
num <- data[, sapply(data, is.numeric)]
names(num)
num <- num[,!(names(num) %in% c("Id", "MSSubClass", "MoSold", "YrSold", "age", "epoch", "GarageYrBlt", "YearBuilt", "YearRemodAdd"))]
num <- num[, sapply(num, function(x) {range(x)[2]-range(x)[1]>30})]
num2 <- num
num2_col <- sapply(names(num2), function(x) paste0(x, "_2"))
num2 <- data.frame(sapply(num2, function(x) x^2))
names(num2) <- num2_col
num3 <- num
num3_col <- sapply(names(num3), function(x) paste0(x, "_2"))
num3 <- data.frame(sapply(num3, function(x) x^3))
names(num3) <- num3_col
data <- cbind(data,num2)
data <- cbind(data,num3)
data$remodeled <- ifelse(data$YearRemodAdd-data$YearBuilt > 0, 1, 0)
data$age <- ifelse(data$YearRemodAdd-data$YearBuilt > 0,
data$YrSold-data$YearRemodAdd, data$YrSold-data$YearBuilt)
data$garage_age <- data$YrSold-data$GarageYrBlt
data$epoch <- ifelse(data$YrSold-data$YearBuilt >100, 2,ifelse(data$YrSold-data$YearBuilt >50, 1,0))
data$OverallCond <- ifelse(data$OverallCond> 5, 1, ifelse(data$OverallCond< 5, -1,0))
data$OverallQual <- ifelse((data$OverallQual+data$OverallCond) < 0, 0,(data$OverallQual+data$OverallCond))
data$GarageCond <- ifelse(data$GarageCond> 4, 1, ifelse(data$GarageCond< 4, -1,0))
data$GarageQual <- ifelse((data$GarageQual+data$GarageCond) < 0, 0,(data$GarageQual+data$GarageCond))
data$ExterCond <- ifelse(data$ExterCond> 3, 1, ifelse(data$ExterCond< 3, -1,0))
data$ExterQual <- ifelse((data$ExterQual+data$ExterCond) < 0, 0,(data$ExterQual+data$ExterCond))
data$Fireplaces <- ifelse(data$Fireplaces > 1, 2, data$Fireplaces)
data$bathRoomRel <-  data$TotRmsAbvGrd- data$HalfBath+data$FullBath
data$space <- data$GrLivArea - data$X1stFlrSF -  data$X2ndFlrSF
data <- data[, !(names(data) %in% c("GarageYrBlt", "YearBuilt", "YearRemodAdd",
"OverallCond", "GarageCond", "BsmtCond", "ExterCond" ))]
data <- data <- data[, !(names(data) %in% exc)]
data <- cbind(data, cat)
train_tot <- data[1:nrow(train),]
train_tot$SalePrice <- log(y+1)
train_tot <- train_tot[,-1]
sum(sapply(train_tot, class) != "numeric")
train_tot <- as.data.frame(sapply(train_tot, as.numeric))
test_tot <- data[(nrow(train)+1):nrow(data),]
ind <- sample(1:nrow(train_tot), floor(10*nrow(train_tot)/100),
replace=FALSE)
train_tot1 <- train_tot[ind,]
train_tot <- train_tot[!(row.names(train_tot) %in% ind),]
train_x <- train_tot[, !(names(train_tot) %in% c("Id", "SalePrice"))]
y_train <- train_tot$SalePrice
xgb_train <- xgb.DMatrix(model.matrix(~., data = train_x),
label=y_train, missing=NA)
#All
##############################################################################################################
history <- xgb.cv(data = xgb_train, nround=800, nthread = 6, nfold = 10, metrics=list("rmse"),
max.depth =6, eta = 0.021, gamma = 0.025, colsample_bytree = 0.2,  objective = "reg:linear")
param<-list(
objective = "reg:linear",
eval_metric = "rmse",
booster = "gbtree",
max_depth = 6,
eta = 0.021,
gamma = 0.025,
colsample_bytree = 0.2
#,
#min_child_weight=1
)
Training <-
xgb.train(params = param,
data = xgb_train,
nrounds = 1000,
watchlist = list(train = xgb_train),
verbose = TRUE,
print_every_n = 50,
nthread = 6)
train_x <- train_tot1[, !(names(train_tot1) %in% c("Id", "SalePrice"))]
xgb_test <- xgb.DMatrix(model.matrix(~., data = train_x),
missing=NA)
xgb_pred <- predict(Training, newdata=xgb_test)
CARET.TRAIN.CTRL <- trainControl(method="repeatedcv",
number=10,
repeats=10,
verboseIter=FALSE)
lambdas <- seq(1,0,-0.001)
# train model
set.seed(123)  # for reproducibility
model_ridge <- train(SalePrice ~ .,
data = train_tot,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=0, # Ridge regression
lambda=lambdas))
ggplot(data=filter(model_ridge$result,RMSE<0.14)) +
geom_line(aes(x=lambda,y=RMSE))
mean(model_ridge$resample$RMSE)
ridge_pred <- predict(model_ridge,newdata= train_tot1)
set.seed(123)  # for reproducibility
model_lasso <- train(SalePrice ~ .,
data = train_tot,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=1,  # Lasso regression
lambda=c(1,0.1,0.05,0.01,seq(0.009,0.001,-0.001),
0.00075,0.0005,0.0001)))
ggplot(data=filter(model_lasso$result,RMSE<0.14)) +
geom_line(aes(x=lambda,y=RMSE))
mean(model_lasso$resample$RMSE)
lasso_pred <- predict(model_lasso,newdata= train_tot1)
train_tot1$xgb_pred <-  xgb_pred
train_tot1$ridge_pred <-  ridge_pred
train_tot1$lasso_pred <-  lasso_pred
train_tot2 <- train_tot1
train_x <- train_tot2[, !(names(train_tot2) %in% c("Id", "SalePrice"))]
y_train <- train_tot2$SalePrice
xgb_train <- xgb.DMatrix(model.matrix(~., data = train_x),
label=y_train, missing=NA)
#All
##############################################################################################################
history <- xgb.cv(data = xgb_train, nround=800, nthread = 6, nfold = 10, metrics=list("rmse"),
max.depth =6, eta = 0.021, gamma = 0.025, colsample_bytree = 0.2,  objective = "reg:linear")
param<-list(
objective = "reg:linear",
eval_metric = "rmse",
booster = "gbtree",
max_depth = 6,
eta = 0.021,
gamma = 0.025,
colsample_bytree = 0.2
#,
#min_child_weight=1
)
Training <-
xgb.train(params = param,
data = xgb_train,
nrounds = 1000,
watchlist = list(train = xgb_train),
verbose = TRUE,
print_every_n = 50,
nthread = 6)
xgb_test <- xgb.DMatrix(model.matrix(~., data = test_tot[,-1]),
missing=NA)
xgb_pred <- predict(Training, newdata=xgb_test)
Submit <- data.frame(Id= test$Id, SalePrice= (exp(xgb_pred)-1))
write.csv(Submit, "./predictions/submission_xgb_ensemble.csv", row.names=FALSE)
