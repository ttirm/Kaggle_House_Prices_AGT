(fds <- with(d, tapply(day, my, min)))
class(fds)
fds
(fds <- as.Date(paste(row.names(fds), fds, sep = '-')))
res <- lapply(res, function(x) x[which(zoo::index(x) %in% fds)])
res <- do.call(merge, res)
res
names(res)
?do.call
str(res)
res <- as.data.frame(res)
names(res) <- symbols
LIBOR <- LIBOR[LIBOR$Date %in% fds, 'Value']
rft <- log(1 + head(LIBOR, -1)/36000 * as.numeric(diff(fds)))
res <- apply(res, 2, riskpremium)
SP500 <- SP500[SP500$Date %in% fds, 'Adjusted Close']
str(SP500)
SP500
logreturn <- function(x) log(tail(x, -1) / head(x, -1))
riskpremium <- function(x) logreturn(x) - rft
symbols <- c("A", "AA", "AAPL", "ABC", "ABT", "ACE", "ACN",
"ADBE", "ADI", "ADM", "ADP", "ADSK", "AEE", "AEP", "AES","AET", "AFL",
"AGN", "AIG", "AIV", "AIZ", "AKAM", "ALL", "ALTR", "ALXN", "AMAT", "AMD",
"AMGN", "AMP", "AMT", "AMZN", "AN", "ANF", "AON", "APA", "APC", "APD",
"APH", "APOL", "ARG", "ATI", "AVB", "AVP", "AVY", "AXP", "AZO", "BA",
"BAC", "BAX", "BBBY", "BBT", "BBY", "BCR", "BDX", "BEAM", "BEN",
"BHI", "BIIB", "BK", "BLK", "BLL", "BMC", "BMS", "BMY", "BRCM",
"BSX", "BTU", "BXP", "C", "CA", "CAG", "CAH", "CAM", "CAT", "CB", "CBG",
"CBS", "CCE", "CCI", "CCL", "CELG", "CERN", "CF", "CHK", "CHRW", "CI",
"CINF", "CL", "CLF", "CLX", "CMA", "CMCSA", "CME")
library(tseries)
res <- lapply(symbols, function(symbol) get.hist.quote(symbol, quote = "AdjClose", quiet = TRUE, start = as.Date('2003-01-01'), end = as.Date('2007-01-01')))
head(res[[1]])
LIBOR <- Quandl('FED/RILSPDEPM01_N_B', start_date = '2003-01-01', end_date = '2007-01-01')
SP500 <- Quandl('YAHOO/INDEX_GSPC',start_date = '2003-01-01', end_date = '2007-01-01')
cdates <- intersect(LIBOR$Date, SP500$Date)
d <- data.frame(date = as.Date(cdates, origin = '1970-01-01'))
str(d)
d$day <- format(d$date, format = '%d')
d$my <- format(d$date, format = '%Y-%m')
(fds <- with(d, tapply(day, my, min)))
(fds <- as.Date(paste(row.names(fds), fds, sep = '-')))
res <- lapply(res, function(x) x[which(zoo::index(x) %in% fds)])
res <- do.call(merge, res)
names(res)
str(res)
res <- as.data.frame(res)
names(res) <- symbols
LIBOR <- LIBOR[LIBOR$Date %in% fds, 'Value']
rft <- log(1 + head(LIBOR, -1)/36000 * as.numeric(diff(fds)))
res <- apply(res, 2, riskpremium)
SP500 <- SP500[SP500$Date %in% fds, 'Adjusted Close']
library(Quandl)
LIBOR <- Quandl('FED/RILSPDEPM01_N_B', start_date = '2003-01-01', end_date = '2007-01-01')
SP500 <- Quandl('YAHOO/INDEX_GSPC',start_date = '2003-01-01', end_date = '2007-01-01')
cdates <- intersect(LIBOR$Date, SP500$Date)
d <- data.frame(date = as.Date(cdates, origin = '1970-01-01'))
str(d)
d$day <- format(d$date, format = '%d')
d$my <- format(d$date, format = '%Y-%m')
(fds <- with(d, tapply(day, my, min)))
(fds <- as.Date(paste(row.names(fds), fds, sep = '-')))
res <- lapply(res, function(x) x[which(zoo::index(x) %in% fds)])
res <- do.call(merge, res)
names(res)
str(res)
res <- as.data.frame(res)
names(res) <- symbols
LIBOR <- LIBOR[LIBOR$Date %in% fds, 'Value']
rft <- log(1 + head(LIBOR, -1)/36000 * as.numeric(diff(fds)))
res <- apply(res, 2, riskpremium)
SP500 <- SP500[SP500$Date %in% fds, 'Adjusted Close']
res
logreturn <- function(x) log(tail(x, -1) / head(x, -1))
riskpremium <- function(x) logreturn(x) - rft
symbols <- c("A", "AA", "AAPL", "ABC", "ABT", "ACE", "ACN",
"ADBE", "ADI", "ADM", "ADP", "ADSK", "AEE", "AEP", "AES","AET", "AFL",
"AGN", "AIG", "AIV", "AIZ", "AKAM", "ALL", "ALTR", "ALXN", "AMAT", "AMD",
"AMGN", "AMP", "AMT", "AMZN", "AN", "ANF", "AON", "APA", "APC", "APD",
"APH", "APOL", "ARG", "ATI", "AVB", "AVP", "AVY", "AXP", "AZO", "BA",
"BAC", "BAX", "BBBY", "BBT", "BBY", "BCR", "BDX", "BEAM", "BEN",
"BHI", "BIIB", "BK", "BLK", "BLL", "BMC", "BMS", "BMY", "BRCM",
"BSX", "BTU", "BXP", "C", "CA", "CAG", "CAH", "CAM", "CAT", "CB", "CBG",
"CBS", "CCE", "CCI", "CCL", "CELG", "CERN", "CF", "CHK", "CHRW", "CI",
"CINF", "CL", "CLF", "CLX", "CMA", "CMCSA", "CME")
library(tseries)
library(Quandl)
res <- lapply(symbols, function(symbol) get.hist.quote(symbol, quote = "AdjClose", quiet = TRUE, start = as.Date('2003-01-01'), end = as.Date('2007-01-01')))
head(res[[1]])
LIBOR <- Quandl('FED/RILSPDEPM01_N_B', start_date = '2003-01-01', end_date = '2007-01-01')
SP500 <- Quandl('YAHOO/INDEX_GSPC',start_date = '2003-01-01', end_date = '2007-01-01')
cdates <- intersect(LIBOR$Date, SP500$Date)
d <- data.frame(date = as.Date(cdates, origin = '1970-01-01'))
str(d)
d$day <- format(d$date, format = '%d')
d$my <- format(d$date, format = '%Y-%m')
(fds <- with(d, tapply(day, my, min)))
(fds <- as.Date(paste(row.names(fds), fds, sep = '-')))
res <- lapply(res, function(x) x[which(zoo::index(x) %in% fds)])
res <- do.call(merge, res)
names(res)
str(res)
res <- as.data.frame(res)
names(res) <- symbols
LIBOR <- LIBOR[LIBOR$Date %in% fds, 'Value']
rft <- log(1 + head(LIBOR, -1)/36000 * as.numeric(diff(fds)))
res <- apply(res, 2, riskpremium)
SP500 <- SP500[SP500$Date %in% fds, 'Adjusted Close']
res
res <- apply(res, 2, riskpremium)
res <- as.data.frame(res)
r <- t(sapply(symbols, function(symbol)
+ c(beta = lm(res[, symbol] ~ riskpremium(SP500))$coefficients[[2]], mean = mean(res[, symbol]))))
r <- as.data.frame(r)
r
mean(res[, symbol])
r <- t(sapply(symbols, function(symbol)
+ c(beta = lm(res[, symbol] ~ riskpremium(SP500))$coefficients[[2]], mean = mean(res[, symbol]))))
r <- as.data.frame(r)
r
res
res <- lapply(symbols, function(symbol) get.hist.quote(symbol, quote = "AdjClose", quiet = TRUE, start = as.Date('2003-01-01'), end = as.Date('2007-01-01')))
d <- data.frame(date = as.Date(cdates, origin = '1970-01-01'))
str(d)
d$day <- format(d$date, format = '%d')
d$my <- format(d$date, format = '%Y-%m')
(fds <- with(d, tapply(day, my, min)))
(fds <- as.Date(paste(row.names(fds), fds, sep = '-')))
res <- lapply(res, function(x) x[which(zoo::index(x) %in% fds)])
res <- do.call(merge, res)
names(res)
str(res)
res <- as.data.frame(res)
names(res) <- symbols
LIBOR <- LIBOR[LIBOR$Date %in% fds, 'Value']
rft <- log(1 + head(LIBOR, -1)/36000 * as.numeric(diff(fds)))
LIBOR <- LIBOR[LIBOR$Date %in% fds, 'Value']
LIBOR <- Quandl('FED/RILSPDEPM01_N_B', start_date = '2003-01-01', end_date = '2007-01-01')
cdates <- intersect(LIBOR$Date, SP500$Date)
logreturn <- function(x) log(tail(x, -1) / head(x, -1))
riskpremium <- function(x) logreturn(x) - rft
symbols <- c("A", "AA", "AAPL", "ABC", "ABT", "ACE", "ACN",
"ADBE", "ADI", "ADM", "ADP", "ADSK", "AEE", "AEP", "AES","AET", "AFL",
"AGN", "AIG", "AIV", "AIZ", "AKAM", "ALL", "ALTR", "ALXN", "AMAT", "AMD",
"AMGN", "AMP", "AMT", "AMZN", "AN", "ANF", "AON", "APA", "APC", "APD",
"APH", "APOL", "ARG", "ATI", "AVB", "AVP", "AVY", "AXP", "AZO", "BA",
"BAC", "BAX", "BBBY", "BBT", "BBY", "BCR", "BDX", "BEAM", "BEN",
"BHI", "BIIB", "BK", "BLK", "BLL", "BMC", "BMS", "BMY", "BRCM",
"BSX", "BTU", "BXP", "C", "CA", "CAG", "CAH", "CAM", "CAT", "CB", "CBG",
"CBS", "CCE", "CCI", "CCL", "CELG", "CERN", "CF", "CHK", "CHRW", "CI",
"CINF", "CL", "CLF", "CLX", "CMA", "CMCSA", "CME")
library(tseries)
library(Quandl)
res <- lapply(symbols, function(symbol) get.hist.quote(symbol, quote = "AdjClose", quiet = TRUE, start = as.Date('2003-01-01'), end = as.Date('2007-01-01')))
head(res[[1]])
LIBOR <- Quandl('FED/RILSPDEPM01_N_B', start_date = '2003-01-01', end_date = '2007-01-01')
SP500 <- Quandl('YAHOO/INDEX_GSPC',start_date = '2003-01-01', end_date = '2007-01-01')
cdates <- intersect(LIBOR$Date, SP500$Date)
d <- data.frame(date = as.Date(cdates, origin = '1970-01-01'))
str(d)
d$day <- format(d$date, format = '%d')
d$my <- format(d$date, format = '%Y-%m')
(fds <- with(d, tapply(day, my, min)))
(fds <- as.Date(paste(row.names(fds), fds, sep = '-')))
res <- lapply(res, function(x) x[which(zoo::index(x) %in% fds)])
res <- do.call(merge, res)
names(res)
str(res)
res <- as.data.frame(res)
names(res) <- symbols
LIBOR <- LIBOR[LIBOR$Date %in% fds, 'Value']
rft <- log(1 + head(LIBOR, -1)/36000 * as.numeric(diff(fds)))
res <- apply(res, 2, riskpremium)
SP500 <- SP500[SP500$Date %in% fds, 'Adjusted Close']
res
class(res)
res <- as.data.frame(res)
r <- t(sapply(symbols, function(symbol)
+ c(beta = lm(res[, symbol] ~ riskpremium(SP500))$coefficients[[2]], mean = mean(res[, symbol]))))
r <- as.data.frame(r)
r
plot(r$beta, r$mean)
abline(lm(r$mean ~ r$beta), col = 'red')
summary(lm(r$mean ~ r$beta))
1-0.998
1-0.9994
library(manipulate)
install.packages("manipulate")
library(manipulate)
library(manipulate)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("shiny")
library(shiny)
library(qdap)
library(rJava)
?bag_o_words
library(tm)
library(RWeka)
library(ggplot2)
library(wordcloud)
library(NLP)
library(openNLP)
library(magrittr)
library(openNLPmodels.en);
# Data loading
blogs <- readLines("./final/en_US/en_US.blogs.txt", n = 100, encoding = "UTF-8")
blogs <- paste(blogs, collapse = " ")
logs <- as.String(blogs)
# Create annotators for words, sentences, persons, locations and organizations
word_ann <- Maxent_Word_Token_Annotator()
sent_ann <- Maxent_Sent_Token_Annotator()
person_ann <- Maxent_Entity_Annotator(kind = "person")
location_ann <- Maxent_Entity_Annotator(kind = "location")
organization_ann <- Maxent_Entity_Annotator(kind = "organization")
# Apply the annotators to the text
pipeline <- list(sent_ann,
word_ann,
person_ann,
location_ann,
organization_ann)
blogs_annotations <- annotate(blogs, pipeline)
# Data loading
blogs <- readLines("./final/en_US/en_US.blogs.txt", n = 100, encoding = "UTF-8")
blogs <- paste(blogs, collapse = " ")
blogs <- as.String(blogs)
# Create annotators for words, sentences, persons, locations and organizations
word_ann <- Maxent_Word_Token_Annotator()
sent_ann <- Maxent_Sent_Token_Annotator()
person_ann <- Maxent_Entity_Annotator(kind = "person")
location_ann <- Maxent_Entity_Annotator(kind = "location")
organization_ann <- Maxent_Entity_Annotator(kind = "organization")
# Apply the annotators to the text
pipeline <- list(sent_ann,
word_ann,
person_ann,
location_ann,
organization_ann)
blogs_annotations <- annotate(blogs, pipeline)
blogs <- readLines("./final/en_US/en_US.blogs.txt", n = 100, encoding = "UTF-8")
#blogs <- paste(blogs, collapse = " ")
blogs <- as.String(blogs)
# Create annotators for words, sentences, persons, locations and organizations
word_ann <- Maxent_Word_Token_Annotator()
sent_ann <- Maxent_Sent_Token_Annotator()
person_ann <- Maxent_Entity_Annotator(kind = "person")
location_ann <- Maxent_Entity_Annotator(kind = "location")
organization_ann <- Maxent_Entity_Annotator(kind = "organization")
# Apply the annotators to the text
pipeline <- list(sent_ann,
word_ann,
person_ann,
location_ann,
organization_ann)
blogs_annotations <- annotate(blogs, pipeline)
load(mtcars)
load(cars)
data(mtcars)
head(mtcars)
summary(mtcars)
summary(mtcars[, 1:4])
str(mtcars)
table(cyl)
table(mtcars$cyl)
table(mtcars$cyl, mtcars$mpg)
plot(table(mtcars$cyl, mtcars$mpg))
ggplot(mtcars, aes(cyl, mpg) ) +
geom_point()
library(ggplot)
library(ggplot2)
ggplot(mtcars, aes(cyl, mpg) ) +
geom_point()
library(lm)
lm(mpg ~ cyl + hp, data = mtcars)
fit <- lm(mpg ~ cyl + hp, data = mtcars)
plot(fit)
plot(fit)
summary(fit)
fit$model
summary(fit)
plot(fit)
shiny::runApp('GitHub/Coursera_DS_Capstone/project_app')
runApp('GitHub/Coursera_DS_Capstone/project_app')
cap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=" ")
}
c <- c("dog", "cat", "bird")
cap(c)
sapply(c, cap)
strsplit(c, " ")[[1]]
strsplit("dog", " ")[[1]]
runApp('GitHub/Coursera_DS_Capstone/project_app')
runApp('GitHub/Coursera_DS_Capstone/project_app')
runApp('GitHub/Coursera_DS_Capstone/project_app')
runApp('GitHub/Coursera_DS_Capstone/project_app')
runApp('GitHub/Coursera_DS_Capstone/project_app')
runApp('GitHub/Coursera_DS_Capstone/project_app')
runApp('GitHub/Coursera_DS_Capstone/project_app')
![Caption for the picture.](./project_presentation-figure/app1.png)
![Application Screenshot.](./project_presentation-figure/app1.png)
![Application Screenshot.](project_presentation-figure/app1.png)
* In future developments, an implementation of this project with a big data platform would enable a much more robust solution.
setwd("C:/Users/tiago_000/Documents/GitHub/Kaggle_House_Prices_AGT")
library(caret)
train <- read.csv("./data/train.csv", stringsAsFactors = FALSE)
test <- read.csv("./data/test.csv", stringsAsFactors = FALSE)
summary(train)
str(train)
dim(train)
log(1)
head(train)
nas <- apply(train, 2,function(x)sum(is.na(x))/length(x))
nam <- as.character(names(train))
length(nam)
length(nas)
names(nas) <- nam
nas <- nas[nas < 0.5]
nas
train <- train[,names(nas)]
test <- test[,names(nas)[-length(nas)]]
# Remove duplicates
###########################################
train <- unique(train)
# NAs treatment
###########################################
head(train$FireplaceQu)
head(train$Fireplaces)
train$FireplaceQu[is.na(train$FireplaceQu)] <- "None"
test$FireplaceQu[is.na(test$FireplaceQu)] <- "None"
head(train$LotFrontage,20)
summary(train$LotFrontage)
head(train$LotArea,20)
train$LotFrontage[is.na(train$LotFrontage)] <- mean(train$LotFrontage, na.rm = TRUE)
test$LotFrontage[is.na(test$LotFrontage)] <- mean(test$LotFrontage, na.rm = TRUE)
head(train$MasVnrType,50)
head(train$MasVnrArea,50)
train$MasVnrType[is.na(train$MasVnrType)] <- "None"
train$MasVnrArea[is.na(train$MasVnrArea)] <- 0
test$MasVnrType[is.na(test$MasVnrType)] <- "None"
test$MasVnrArea[is.na(test$MasVnrArea)] <- 0
head(train$BsmtQual)
str(train$BsmtQual)
head(train$BsmtCond)
train$BsmtQual[is.na(train$BsmtQual)] <- "None"
train$BsmtCond[is.na(train$BsmtCond)] <- "None"
train$BsmtExposure[is.na(train$BsmtExposure)] <- "None"
train$BsmtFinType1[is.na(train$BsmtFinType1)] <- "None"
train$BsmtFinType2[is.na(train$BsmtFinType2)] <- "None"
test$BsmtQual[is.na(test$BsmtQual)] <- "None"
test$BsmtCond[is.na(test$BsmtCond)] <- "None"
test$BsmtExposure[is.na(test$BsmtExposure)] <- "None"
test$BsmtFinType1[is.na(test$BsmtFinType1)] <- "None"
test$BsmtFinType2[is.na(test$BsmtFinType2)] <- "None"
head(train$Electrical)
train$Electrical[is.na(train$Electrical)] <- "SBrkr"
test$Electrical[is.na(test$Electrical)] <- "SBrkr"
head(train$GarageType)
train$GarageType[is.na(train$GarageType)] <- "None"
test$GarageType[is.na(test$GarageType)] <- "None"
head(train$GarageCars)
train$GarageCars[is.na(train$GarageCars)] <- 0
test$GarageCars[is.na(test$GarageCars)] <- 0
head(train$GarageArea)
train$GarageArea[is.na(train$GarageArea)] <- 0
test$GarageArea[is.na(test$GarageArea)] <- 0
head(train$GarageQual)
train$GarageQual[is.na(train$GarageQual)] <- "None"
test$GarageQual[is.na(test$GarageQual)] <- "None"
head(train$GarageCond)
train$GarageCond[is.na(train$GarageCond)] <- "None"
test$GarageCond[is.na(test$GarageCond)] <- "None"
head(train$GarageYrBlt)
train$GarageYrBlt[is.na(train$GarageYrBlt)] <- min(train$GarageYrBlt, na.rm = TRUE)
test$GarageYrBlt[is.na(test$GarageYrBlt)] <- min(test$GarageYrBlt, na.rm = TRUE)
head(train$GarageFinish)
train$GarageFinish[is.na(train$GarageFinish)] <- "None"
test$GarageFinish[is.na(test$GarageFinish)] <- "None"
nas2 <- apply(train, 2,function(x)sum(is.na(x))/length(x))
nas2[nas2 >0]
nas2 <- apply(test, 2,function(x)sum(is.na(x))/length(x))
nas2[nas2 >0]
# Imputation test
test[is.na(test$BsmtFinSF1), c("BsmtFinSF1" ,  "BsmtFinSF2",   "BsmtUnfSF",  "TotalBsmtSF", "BsmtFullBath",  "BsmtHalfBath")] <- 0
test[is.na(test$BsmtFullBath), c("BsmtFullBath","BsmtHalfBath")] <- 0
table(test$Fireplaces, test$FireplaceQu, exclude = NULL)
aux <- table(train$Neighborhood, train$MSZoning)
aux <- data.frame(neighbourhood = rownames(aux), cols = colnames(aux)[apply(aux,1,which.max)])
test[is.na(test$MSZoning), "MSZoning"] <-  sapply(test[is.na(test$MSZoning), "Neighborhood"], function(x)aux[aux$neighbourhood == x,"cols"])
aux <- table(train$Neighborhood, train$Exterior1st)
aux <- data.frame(Neighborhood = rownames(aux), cols = colnames(aux)[apply(aux,1,which.max)])
test[is.na(test$Exterior1st), "Exterior1st"] <-  sapply(test[is.na(test$Exterior1st), "Neighborhood"], function(x)aux[aux$Neighborhood == x,"cols"])
aux <- table(train$Neighborhood, train$Exterior2nd)
aux <- data.frame(Neighborhood = rownames(aux), cols = colnames(aux)[apply(aux,1,which.max)])
test[is.na(test$Exterior2nd), "Exterior2nd"] <-  sapply(test[is.na(test$Exterior2nd), "Neighborhood"], function(x)aux[aux$Neighborhood == x,"cols"])
table(train$SaleCondition, train$SaleType)
test[is.na(test$SaleType), "SaleType"] <- "WD"
table(test$OverallQual, test$KitchenQual, exclude = NULL)
test[is.na(test$KitchenQual), "KitchenQual"] <-  "TA"
nz <- colnames(train[,nearZeroVar(train)])
train <- train[, !names(train) %in% nz]
test <- test[, !names(test) %in% nz]
train <- train[train$GrLivArea < 4000,]
save(train, file = "./files/train1.Rda")
save(test, file = "./files/test1.Rda")
load("./files/train1.Rda")
load("./files/test1.Rda")
ggplot(data=train, aes(x= OverallCond, y = SalePrice)) +
geom_point()
ggplot(data=train, aes(x= OverallQual, y = SalePrice)) +
geom_point()
ggplot(data=train, aes(x= OverallQual, y = log(SalePrice+1))) +
geom_point()
ggplot(data=train, aes(x= log(OverallQual+1), y = log(SalePrice+1))) +
geom_point()
ggplot(data=train, aes(x= OverallQual, y = SalePrice)) +
geom_point()
ggplot(data=train, aes(x= GrLivArea, y = SalePrice)) +
geom_point()
ggplot(data=train, aes(x= GrLivArea, y = log(SalePrice+1))) +
geom_point()
ggplot(data=train, aes(x= log(GrLivArea+1), y = log(SalePrice+1))) +
geom_point()
ggplot(data=train, aes(x= OverallCond, y = SalePrice)) +
geom_point()
ggplot(data=data, aes(x=ExterQual, y=SalePrice)) +
geom_point()
data$ExterQual <- factor(data$ExterQual, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
data$ExterQual <- as.numeric(data$ExterQual)
data$ExterQual
load("./files/train1.Rda")
load("./files/test1.Rda")
y <- train$SalePrice
data <- rbind(train[, !(names(train) %in% 'SalePrice')], test)
ggplot(data=data, aes(x=ExterQual, y=SalePrice)) +
geom_point()
ggplot(data=train, aes(x=ExterQual, y=SalePrice)) +
geom_point()
train$ExterQual <- factor(train$ExterQual, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
train$ExterQual <- as.numeric(train$ExterQual)
ggplot(data=train, aes(x=ExterQual, y=SalePrice)) +
geom_point()
ggplot(data=train, aes(x=ExterQual, y=log(SalePrice+1))) +
geom_point()
train$ExterCond <- factor(train$ExterCond, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
train$ExterCond <- as.numeric(train$ExterCond)
ggplot(data=train, aes(x=ExterCond, y=log(SalePrice+1))) +
geom_point()
train$ExterQual1 <- train$ExterQual-train$ExterCond
ggplot(data=train, aes(x=ExterQual1, y=log(SalePrice+1))) +
geom_point()
train$ExterQual1 <- train$ExterQual+(train$ExterCond-5)
ggplot(data=train, aes(x=ExterQual1, y=log(SalePrice+1))) +
geom_point()
train$ExterQual1 <- if(train$ExterQual+(train$ExterCond-5)<0, 0,train$ExterQual+(train$ExterCond-5))
train$ExterQual1 <- ifelse(train$ExterQual+(train$ExterCond-5)<0, 0,train$ExterQual+(train$ExterCond-5))
ggplot(data=train, aes(x=ExterQual1, y=log(SalePrice+1))) +
geom_point()
cat <- data[, sapply(data, is.character)]
head(cat[, !(names(train_r) %in% cat])
cat
head(cat[, !(names(train_r) %in% cat)])
head(cat[, !(names(data) %in% cat)])
head(cat[, !(names(cat) %in% cat)])
cat <- data[, sapply(data, is.character)]
head(cat[, !(names(cat) %in% cat)])
head(cat[, (names(cat) %in% cat)])
head(cat[, !(names(cat) %in% exc)])
exc <- c("GarageQual", "GarageCond", "GarageFinish", "PavedDrive", "BsmtQual", "BsmtExposure", "BsmtFinType1", "ExterQual",
"ExterCond", "FireplaceQu", "HeatingQC", "CentralAir", "Electrical", "KitchenQual")
head(cat[, !(names(cat) %in% exc)])
ggplot(data=train, aes(x=OverallQual, y=SalePrice)) +
geom_point()
ggplot(data=train, aes(x=OverallQual, y=log(SalePrice+1))) +
geom_point()
ggplot(data=train, aes(x=OverallQual, y=SalePrice)) +
geom_point()
ggplot(data=train, aes(x=OverallQual, y=log(SalePrice+1))) +
geom_point()
ggplot(data=train, aes(x=(OverallQual+(OverallCond-5)), y=log(SalePrice+1))) +
geom_point()
ggplot(data=train, aes(x=OverallQual, y=log(SalePrice+1))) +
geom_point()
ggplot(data=train, aes(x=(OverallQual+(OverallCond-5)), y=log(SalePrice+1))) +
geom_point()
ggplot(data=train, aes(x=OverallCond, y=log(SalePrice+1))) +
geom_point()
data$OverallCond <- ifelse(data$OverallCond> 5, 1, felse(data$OverallCond< 5, -1,0)
data$OverallQual <- ifelse(train$OverallQual+data$OverallCond < 0, 0,data$OverallQual+(data$OverallCond-5))
data$OverallCond <- ifelse(data$OverallCond> 5, 1, felse(data$OverallCond< 5, -1,0))
data$OverallCond <- ifelse(data$OverallCond> 5, 1, ifelse(data$OverallCond< 5, -1,0))
data$OverallQual <- ifelse((train$OverallQual+data$OverallCond) < 0, 0,data$OverallQual+(data$OverallCond-5))
data$OverallQual <- ifelse((train$OverallQual+train$OverallCond) < 0, 0,train$OverallQual+train$OverallCond)
load("./files/train1.Rda")
load("./files/test1.Rda")
y <- train$SalePrice
data <- rbind(train[, !(names(train) %in% 'SalePrice')], test)
data$OverallCond <- ifelse(data$OverallCond> 5, 1, ifelse(data$OverallCond< 5, -1,0))
data$OverallQual <- ifelse((train$OverallQual+train$OverallCond) < 0, 0,train$OverallQual+train$OverallCond)
train$OverallQual+train$OverallCond
ifelse((train$OverallQual+train$OverallCond) < 0, 0,(train$OverallQual+train$OverallCond))
data$OverallQual <- ifelse((train$OverallQual+train$OverallCond) < 0, 0,(train$OverallQual+train$OverallCond))
data$OverallQual <- ifelse((data$OverallQual+data$OverallCond) < 0, 0,(data$OverallQual+data$OverallCond))
ggplot(data=train, aes(x=OverallQual, y=log(SalePrice+1))) +
geom_point()
ggplot(data=train, aes(x=ExterQual, y=log(SalePrice+1))) +
geom_point()
