data$ExterQual <- factor(data$ExterQual, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
data$ExterQual <- as.numeric(data$ExterQual)
data$ExterCond <- factor(data$ExterCond, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
data$ExterCond <- as.numeric(data$ExterCond)
data$FireplaceQu <- factor(data$FireplaceQu, levels = c("None","Po", "Fa", "TA", "Gd", "Ex"))
data$FireplaceQu <- as.numeric(data$FireplaceQu)
data$HeatingQC <- factor(data$HeatingQC, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
data$HeatingQC <- as.numeric(data$HeatingQC)
data$CentralAir <- factor(data$CentralAir, levels = c("N", "Y"))
data$CentralAir <- as.numeric(data$CentralAir)
data$Electrical <- factor(data$Electrical, levels = c("Mix", "FuseP", "FuseF", "FuseA", "SBrkr"))
data$Electrical <- as.numeric(data$Electrical)
data$KitchenQual <- factor(data$KitchenQual, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
data$KitchenQual <- as.numeric(data$KitchenQual)
# Nominal Categories
#############################################################################################################
exc <- c("GarageQual", "GarageCond", "GarageFinish", "PavedDrive", "BsmtQual", "BsmtExposure", "BsmtFinType1", "ExterQual",
"ExterCond", "FireplaceQu", "HeatingQC", "CentralAir", "Electrical", "KitchenQual")
cat <- data[, sapply(data, is.character)]
cat <- cat[, !(names(cat) %in% exc)]
cat$MSZoning[!(cat$MSZoning %in% c("FV", "RH", "RL", "RM"))] <- "other"
cat$LotShape[!(cat$LotShape %in% c("Reg"))] <- "IR"
cat$LotConfig[!(cat$LotConfig %in% c("Inside"))] <- "other"
cat$Condition1[!(cat$Condition1 %in% c("Norm", "Artery", "Feedr"))] <- "faci"
cat$BldgType[!(cat$BldgType %in% c("1Fam"))] <- "other"
cat$HouseStyle[(cat$HouseStyle %in% c("1.5Fin", "1.5Unf"))] <- "1Story"
cat$HouseStyle[(cat$HouseStyle %in% c("2.5Fin", "2.5Unf", "SFoyer", "SLvl"))] <- "2Story"
cat$RoofStyle[!(cat$RoofStyle %in% c("Gable", "Hip"))] <- "other"
cat$Exterior1st[!(cat$Exterior1st %in% c("HdBoard", "MetalSd", "Plywood", "VinylSd", "Wd Sdng"))] <- "other"
cat$Exterior2nd[!(cat$Exterior2nd %in% c("HdBoard", "MetalSd", "Plywood", "VinylSd", "Wd Sdng"))] <- "other"
cat$MasVnrType[!(cat$MasVnrType %in% c("None", "Stone"))] <- "Brk"
cat$Foundation[(cat$Foundation %in% c("Slab", "Stone", "Wood"))] <- "other"
cat$GarageType[(cat$GarageType %in% c("2Types", "Basment", "CarPort"))] <- "other"
cat$SaleType[!(cat$SaleType %in% c("New", "WD"))] <- "other"
cat$SaleCondition[!(cat$SaleCondition %in% c("Abnorml", "Normal", "Partial"))] <- "other"
# cat$MSSubClass <- factor(data$MSSubClass)
cat$MoSold <- factor(data$MoSold)
#cat$YrSold <- factor(data$YrSold)
exc <- names(cat)
dum <- dummyVars(~., data = cat)
cat <- data.frame(predict(dum, newdata = cat))
# nz <- colnames(cat[,nearZeroVar(cat)])
# cat <- cat[, !names(cat) %in% nz]
# Numerics
#############################################################################################################
num <- data[, sapply(data, is.numeric)]
names(num)
num <- num[,!(names(num) %in% c("Id", "MSSubClass", "MoSold", "YrSold", "age", "epoch", "GarageYrBlt",
"YearBuilt", "YearRemodAdd", "SalePrice", "LotArea"))]
num <- num[, sapply(num, function(x) {range(x)[2]-range(x)[1]>500})]
#
num2 <- num
num2_col <- sapply(names(num2), function(x) paste0(x, "_2"))
num2 <- data.frame(sapply(num2, function(x) x^(2)))
names(num2) <- num2_col
#
num3 <- num
num3_col <- sapply(names(num3), function(x) paste0(x, "_3"))
num3 <- data.frame(sapply(num3, function(x) x^(1/2)))
names(num3) <- num3_col
#
#
data <- cbind(data,num2)
data <- cbind(data,num3)
data$remodeled <- ifelse(data$YearRemodAdd-data$YearBuilt > 0, 1, 0)
data$age <- ifelse(data$YearRemodAdd-data$YearBuilt > 0,
data$YrSold-data$YearRemodAdd, data$YrSold-data$YearBuilt)
data$garage_age <- data$YrSold-data$GarageYrBlt
data$epoch <- ifelse(data$YrSold-data$YearBuilt >100, 2,ifelse(data$YrSold-data$YearBuilt >50, 1,0))
# data$OverallCond <- ifelse(data$OverallCond> 5, 1, ifelse(data$OverallCond< 5, -1,0))
# #data$OverallQual <- ifelse((data$OverallQual+data$OverallCond) < 0, 0,(data$OverallQual+data$OverallCond))
#
# # data$OverallQual2 <- data$OverallQual^2
#
# data$GarageCond <- ifelse(data$GarageCond> 4, 1, ifelse(data$GarageCond< 4, -1,0))
# #data$GarageQual <- ifelse((data$GarageQual+data$GarageCond) < 0, 0,(data$GarageQual+data$GarageCond))
#
#
#
#
# data$ExterCond <- ifelse(data$ExterCond> 3, 1, ifelse(data$ExterCond< 3, -1,0))
# #data$ExterQual <- ifelse((data$ExterQual+data$ExterCond) < 0, 0,(data$ExterQual+data$ExterCond))
#
#
# data$Fireplaces <- ifelse(data$Fireplaces > 1, 2, data$Fireplaces)
data$space <-  data$X2ndFlrSF + data$X1stFlrSF
data$sec <- data$X2ndFlrSF/data$X1stFlrSF
data$bath <- data$FullBath+data$HalfBath
data$Bsmtbath <- data$BsmtFullBath + data$BsmtHalfBath
data$totbath <- data$Bsmtbath + data$bath
data$bathRoomRel <-  data$TotRmsAbvGrd- data$totbath
data$LotArea <- log(data$LotArea+1)
data <- data[, !(names(data) %in% c("GarageYrBlt", "YearBuilt", "YearRemodAdd", "BsmtFullBath", "BsmtHalfBath",
"FullBath", "HalfBath", "X2ndFlrSF", "data$X1stFlrSF"
#,
#"OverallCond", "GarageCond", "BsmtCond", "ExterCond"
))]
data <- data <- data[, !(names(data) %in% exc)]
data <- cbind(data, cat)
train_tot <- data[1:nrow(train),]
train_tot$SalePrice <- log(y+1)
#train_tot <- train_tot[,-1]
sum(sapply(train_tot, class) != "numeric")
train_tot <- as.data.frame(sapply(train_tot, as.numeric))
test_tot <- data[(nrow(train)+1):nrow(data),]
set.seed(123)  # for reproducibility
model_lasso <- train(SalePrice ~ .,
data = train_tot,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=1,  # Lasso regression
lambda=c(1,0.1,0.05,0.01,seq(0.009,0.001,-0.001),
0.00075,0.0005,0.0001)))
train_id <- train_tot[,1]
train_tot <- train_tot[,-1]
set.seed(123)  # for reproducibility
model_lasso <- train(SalePrice ~ .,
data = train_tot,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=1,  # Lasso regression
lambda=c(1,0.1,0.05,0.01,seq(0.009,0.001,-0.001),
0.00075,0.0005,0.0001)))
ggplot(data=filter(model_lasso$result,RMSE<0.14)) +
geom_line(aes(x=lambda,y=RMSE))
mean(model_lasso$resample$RMSE)
plot(residuals(model_lasso))
mean(resid(model_lasso))
aux <- data.frame(id = train_id,res = residuals(model_lasso), y = model_lasso$trainingData )
aux[abs(aux$res) >0.35, ]$id
load("./files/train1.Rda")
load("./files/test1.Rda")
y <- train$SalePrice
data <- rbind(train[, !(names(train) %in% 'SalePrice')], test)
# Ordinal Categories
#############################################################################################################
data$GarageQual <- factor(data$GarageQual, levels = c("None", "Po", "Fa", "TA", "Gd", "Ex"))
data$GarageQual <- as.numeric(data$GarageQual)
data$GarageCond <- factor(data$GarageCond, levels = c("None", "Po", "Fa", "TA", "Gd", "Ex"))
data$GarageCond <- as.numeric(data$GarageCond)
data$GarageFinish <- factor(data$GarageFinish, levels = c("None", "Unf", "RFn", "Fin"))
data$GarageFinish <- as.numeric(data$GarageFinish)
data$PavedDrive <- factor(data$PavedDrive, levels = c("N", "P", "Y"))
data$PavedDrive <- as.numeric(data$PavedDrive)
data$BsmtQual <- factor(data$BsmtQual, levels = c("None", "Po", "Fa", "TA", "Gd", "Ex"))
data$BsmtQual <- as.numeric(data$BsmtQual)
data$BsmtExposure <- factor(data$BsmtExposure, levels = c("None", "No", "Mn", "Av", "Gd"))
data$BsmtExposure <- as.numeric(data$BsmtExposure)
data$BsmtFinType1 <- factor(data$BsmtFinType1, levels = c("None", "Unf", "LwQ", "Rec", "BLQ", "ALQ", "GLQ"))
data$BsmtFinType1 <- as.numeric(data$BsmtFinType1)
data$ExterQual <- factor(data$ExterQual, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
data$ExterQual <- as.numeric(data$ExterQual)
data$ExterCond <- factor(data$ExterCond, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
data$ExterCond <- as.numeric(data$ExterCond)
data$FireplaceQu <- factor(data$FireplaceQu, levels = c("None","Po", "Fa", "TA", "Gd", "Ex"))
data$FireplaceQu <- as.numeric(data$FireplaceQu)
data$HeatingQC <- factor(data$HeatingQC, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
data$HeatingQC <- as.numeric(data$HeatingQC)
data$CentralAir <- factor(data$CentralAir, levels = c("N", "Y"))
data$CentralAir <- as.numeric(data$CentralAir)
data$Electrical <- factor(data$Electrical, levels = c("Mix", "FuseP", "FuseF", "FuseA", "SBrkr"))
data$Electrical <- as.numeric(data$Electrical)
data$KitchenQual <- factor(data$KitchenQual, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
data$KitchenQual <- as.numeric(data$KitchenQual)
# Nominal Categories
#############################################################################################################
exc <- c("GarageQual", "GarageCond", "GarageFinish", "PavedDrive", "BsmtQual", "BsmtExposure", "BsmtFinType1", "ExterQual",
"ExterCond", "FireplaceQu", "HeatingQC", "CentralAir", "Electrical", "KitchenQual")
cat <- data[, sapply(data, is.character)]
cat <- cat[, !(names(cat) %in% exc)]
cat$MSZoning[!(cat$MSZoning %in% c("FV", "RH", "RL", "RM"))] <- "other"
cat$LotShape[!(cat$LotShape %in% c("Reg"))] <- "IR"
cat$LotConfig[!(cat$LotConfig %in% c("Inside"))] <- "other"
cat$Condition1[!(cat$Condition1 %in% c("Norm", "Artery", "Feedr"))] <- "faci"
cat$BldgType[!(cat$BldgType %in% c("1Fam"))] <- "other"
cat$HouseStyle[(cat$HouseStyle %in% c("1.5Fin", "1.5Unf"))] <- "1Story"
cat$HouseStyle[(cat$HouseStyle %in% c("2.5Fin", "2.5Unf", "SFoyer", "SLvl"))] <- "2Story"
cat$RoofStyle[!(cat$RoofStyle %in% c("Gable", "Hip"))] <- "other"
cat$Exterior1st[!(cat$Exterior1st %in% c("HdBoard", "MetalSd", "Plywood", "VinylSd", "Wd Sdng"))] <- "other"
cat$Exterior2nd[!(cat$Exterior2nd %in% c("HdBoard", "MetalSd", "Plywood", "VinylSd", "Wd Sdng"))] <- "other"
cat$MasVnrType[!(cat$MasVnrType %in% c("None", "Stone"))] <- "Brk"
cat$Foundation[(cat$Foundation %in% c("Slab", "Stone", "Wood"))] <- "other"
cat$GarageType[(cat$GarageType %in% c("2Types", "Basment", "CarPort"))] <- "other"
cat$SaleType[!(cat$SaleType %in% c("New", "WD"))] <- "other"
cat$SaleCondition[!(cat$SaleCondition %in% c("Abnorml", "Normal", "Partial"))] <- "other"
# cat$MSSubClass <- factor(data$MSSubClass)
cat$MoSold <- factor(data$MoSold)
#cat$YrSold <- factor(data$YrSold)
exc <- names(cat)
dum <- dummyVars(~., data = cat)
cat <- data.frame(predict(dum, newdata = cat))
# nz <- colnames(cat[,nearZeroVar(cat)])
# cat <- cat[, !names(cat) %in% nz]
# Numerics
#############################################################################################################
num <- data[, sapply(data, is.numeric)]
names(num)
num <- num[,!(names(num) %in% c("Id", "MSSubClass", "MoSold", "YrSold", "age", "epoch", "GarageYrBlt",
"YearBuilt", "YearRemodAdd", "SalePrice", "LotArea"))]
num <- num[, sapply(num, function(x) {range(x)[2]-range(x)[1]>500})]
#
num2 <- num
num2_col <- sapply(names(num2), function(x) paste0(x, "_2"))
num2 <- data.frame(sapply(num2, function(x) x^(2)))
names(num2) <- num2_col
#
num3 <- num
num3_col <- sapply(names(num3), function(x) paste0(x, "_3"))
num3 <- data.frame(sapply(num3, function(x) x^(1/2)))
names(num3) <- num3_col
#
#
data <- cbind(data,num2)
data <- cbind(data,num3)
data$remodeled <- ifelse(data$YearRemodAdd-data$YearBuilt > 0, 1, 0)
data$age <- ifelse(data$YearRemodAdd-data$YearBuilt > 0,
data$YrSold-data$YearRemodAdd, data$YrSold-data$YearBuilt)
data$garage_age <- data$YrSold-data$GarageYrBlt
data$epoch <- ifelse(data$YrSold-data$YearBuilt >100, 2,ifelse(data$YrSold-data$YearBuilt >50, 1,0))
# data$OverallCond <- ifelse(data$OverallCond> 5, 1, ifelse(data$OverallCond< 5, -1,0))
# #data$OverallQual <- ifelse((data$OverallQual+data$OverallCond) < 0, 0,(data$OverallQual+data$OverallCond))
#
# # data$OverallQual2 <- data$OverallQual^2
#
# data$GarageCond <- ifelse(data$GarageCond> 4, 1, ifelse(data$GarageCond< 4, -1,0))
# #data$GarageQual <- ifelse((data$GarageQual+data$GarageCond) < 0, 0,(data$GarageQual+data$GarageCond))
#
#
#
#
# data$ExterCond <- ifelse(data$ExterCond> 3, 1, ifelse(data$ExterCond< 3, -1,0))
# #data$ExterQual <- ifelse((data$ExterQual+data$ExterCond) < 0, 0,(data$ExterQual+data$ExterCond))
#
#
# data$Fireplaces <- ifelse(data$Fireplaces > 1, 2, data$Fireplaces)
data$space <-  data$X2ndFlrSF + data$X1stFlrSF
data$sec <- data$X2ndFlrSF/data$X1stFlrSF
data$bath <- data$FullBath+data$HalfBath
data$Bsmtbath <- data$BsmtFullBath + data$BsmtHalfBath
data$totbath <- data$Bsmtbath + data$bath
data$bathRoomRel <-  data$TotRmsAbvGrd- data$totbath
data$LotArea <- log(data$LotArea+1)
data <- data[, !(names(data) %in% c("GarageYrBlt", "YearBuilt", "YearRemodAdd", "BsmtFullBath", "BsmtHalfBath",
"FullBath", "HalfBath", "X2ndFlrSF", "data$X1stFlrSF"
#,
#"OverallCond", "GarageCond", "BsmtCond", "ExterCond"
))]
data <- data <- data[, !(names(data) %in% exc)]
data <- cbind(data, cat)
train_tot <- data[1:nrow(train),]
train_tot$SalePrice <- log(y+1)
#train_tot <- train_tot[,-1]
sum(sapply(train_tot, class) != "numeric")
train_tot <- as.data.frame(sapply(train_tot, as.numeric))
test_tot <- data[(nrow(train)+1):nrow(data),]
library(glmnet)
library(plyr)
set.seed(29)
folds <- createFolds(train_tot$SalePrice, k=10)
train_folds <- function(fold, dataset, xgb){
testset <- dataset[fold, !(names(dataset) %in% c("Id", "SalePrice")) ]
y <- dataset[fold, "SalePrice"]
id <- dataset[fold, "Id"]
print(id)
trainset <- dataset[-fold, -1]
testid <- test_tot$Id
print(1)
if (xgb == TRUE){
train_x <- trainset[, !(names(trainset) %in% c("Id", "SalePrice"))]
y_train <-  trainset$SalePrice
xgb_train <- xgb.DMatrix(model.matrix(~., data = train_x),
label=y_train, missing=NA)
param<-list(
objective = "reg:linear",
eval_metric = "rmse",
booster = "gbtree",
max_depth = 6,
eta = 0.025,
gamma = 0.001,
colsample_bytree = 0.2,
min_child_weight=1
)
fit <-
xgb.train(params = param,
data = xgb_train,
nrounds = 1000,
watchlist = list(train = xgb_train),
verbose = TRUE,
print_every_n = 50,
nthread = 6)
xgb_test_cv <- xgb.DMatrix(model.matrix(~., data = testset),
missing=NA)
yhat <- predict(fit, newdata=xgb_test_cv)
score <- RMSE(y,yhat)
xgb_test <- xgb.DMatrix(model.matrix(~., data = test_tot[,-1]),
missing=NA)
test_yhat <- predict(fit, newdata=xgb_test)
}else{
print(2)
set.seed(825)
fit <- train(SalePrice ~ .,
data = trainset,
method=met,
trControl=CARET.TRAIN.CTRL,
tuneGrid=CARET.TUNE.GRID,
preProcess= pre,
metric="RMSE",
#                      tuneLength=tun,
#                      linout=lin,
#                      trace=tra,
maximize=FALSE)
print(3)
yhat <- predict(fit,newdata = testset,type = "raw")
print(4)
test_yhat <- predict(fit,newdata = test_tot[, -1],type = "raw")
score <- RMSE(y,yhat)
print(score)
}
ans <- list(model=fit,
score=score,
predictions=data.frame(ID=id,yhat=yhat,y=y),
test_predictions=data.frame(ID=testid,yhat=test_yhat))
return(ans)
}
#Ridge Model
##############################################################################################################
CARET.TUNE.GRID <-  expand.grid(alpha=0, # Ridge regression
lambda= seq(1,0,-0.001))
# model specific training parameter
CARET.TRAIN.CTRL <- trainControl(method="repeatedcv",
number=5,
repeats=10,
verboseIter=FALSE)
pre <- NULL
tun <- NULL
lin <- NULL
tra <- NULL
met <- "glmnet"
ridge_set <- lapply(folds, train_folds,train_tot, FALSE)
#lasso Model
##############################################################################################################
CARET.TUNE.GRID <-  expand.grid(alpha=1,  # Lasso regression
lambda=c(1,0.1,0.05,0.01,seq(0.009,0.001,-0.001),
0.00075,0.0005,0.0001))
# model specific training parameter
CARET.TRAIN.CTRL <- trainControl(method="repeatedcv",
number=5,
repeats=10,
verboseIter=FALSE)
pre <- NULL
tun <- NULL
lin <- NULL
tra <- NULL
met <- "glmnet"
lasso_set <- lapply(folds, train_folds,train_tot, FALSE)
#lm Model
##############################################################################################################
CARET.TUNE.GRID <-  NULL
# model specific training parameter
CARET.TRAIN.CTRL <- trainControl(method="repeatedcv",
number=5,
repeats=10,
verboseIter=FALSE)
pre <- c("center","scale","pca")
tun <- NULL
lin <- NULL
tra <- NULL
met <- "lm"
lm_set <- lapply(folds, train_folds,train_tot, FALSE)
#gbm Model
##############################################################################################################
# CARET.TUNE.GRID <-  NULL
#
# # model specific training parameter
# CARET.TRAIN.CTRL <- trainControl(method="repeatedcv",
#                                  number=5,
#                                  repeats=10,
#                                  verboseIter=FALSE)
#
#
# pre <- NULL
# tun <- NULL
# lin <- NULL
# tra <- NULL
# met <- "gbm"
#
# gbm_set <- lapply(folds, train_folds,train_tot, FALSE)
#nn Model
##############################################################################################################
# CARET.TUNE.GRID <-  NULL
#
# # model specific training parameter
# CARET.TRAIN.CTRL <- trainControl(method="repeatedcv",
#                                  number=5,
#                                  repeats=10,
#                                  verboseIter=FALSE)
#
# pre <- NULL
# tun <- 7
# lin <- TRUE
# tra <- FALSE
# met <- "nnet"
#
# nn_set <- lapply(folds, train_folds,train_tot, FALSE)
#rf Model
##############################################################################################################
# CARET.TUNE.GRID <-  NULL
#
# # model specific training parameter
# CARET.TRAIN.CTRL <- trainControl(method="repeatedcv",
#                                  number=5,
#                                  repeats=10,
#                                  verboseIter=FALSE)
#
# pre <- NULL
# met <- "rf"
#
# rf_set <- lapply(folds, train_folds,train_tot, FALSE)
#xgboost Model
##############################################################################################################
xgboost_set <- lapply(folds, train_folds,train_tot, TRUE)
#Level 1 Model - NNET
##############################################################################################################
ridge_yhat <- do.call(c,lapply(ridge_set,function(x){x$predictions$yhat}))
y <- do.call(c,lapply(ridge_set,function(x){x$predictions$y}))
lasso_yhat <- do.call(c,lapply(lasso_set,function(x){x$predictions$yhat}))
lm_yhat <- do.call(c,lapply(lm_set,function(x){x$predictions$yhat}))
# gbm_yhat <- do.call(c,lapply(gbm_set,function(x){x$predictions$yhat}))
xgboost_yhat <- do.call(c,lapply(xgboost_set,function(x){x$predictions$yhat}))
data_l1 <- data.frame(ridge = ridge_yhat, lasso = lasso_yhat, lm = lm_yhat, xgboost = xgboost_yhat, SalePrice = y)
CARET.TUNE.GRID <-  NULL
# model specific training parameter
CARET.TRAIN.CTRL <- trainControl(method="repeatedcv",
number=5,
repeats=10,
verboseIter=FALSE)
set.seed(123)  # for reproducibility
model_nnet <- train(SalePrice ~ .,
data = data_l1,
method="nnet",
metric="RMSE",
maximize=FALSE,
tuneLength=7,
linout=TRUE,
trace=FALSE,
trControl=CARET.TRAIN.CTRL)
mean(model_nnet$resample$RMSE)
ridge_test <- apply(do.call(cbind,lapply(ridge_set,function(x){x$test_predictions$yhat})),1,mean)
id <- do.call(c,lapply(ridge_set,function(x){x$test_predictions$ID}))
lasso_test <- apply(do.call(cbind,lapply(lasso_set,function(x){x$test_predictions$yhat})),1,mean)
lm_test <- apply(do.call(cbind,lapply(lm_set,function(x){x$test_predictions$yhat})),1,mean)
# gbm_test <- apply(do.call(cbind,lapply(gbm_set,function(x){x$test_predictions$yhat})),1,mean)
xgboost_test <- apply(do.call(cbind,lapply(xgboost_set,function(x){x$test_predictions$yhat})),1,mean)
test_l1 <- data.frame(ridge = ridge_test, lasso = lasso_test, lm = lm_test, xgboost = xgboost_test)
pred <- predict(model_nnet,newdata= test_l1)
res <- (exp(pred)-1)
Submit<-data.frame(Id= test$Id, SalePrice= res)
write.csv(Submit, "./predictions/submission_stack.csv", row.names=FALSE)
train_id <- train_tot[,1]
train_tot <- train_tot[,-1]
set.seed(123)  # for reproducibility
model_lasso <- train(SalePrice ~ .,
data = train_tot,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=1,  # Lasso regression
lambda=c(1,0.1,0.05,0.01,seq(0.009,0.001,-0.001),
0.00075,0.0005,0.0001)))
ggplot(data=filter(model_lasso$result,RMSE<0.14)) +
geom_line(aes(x=lambda,y=RMSE))
mean(model_lasso$resample$RMSE)
names(model_lasso)
coef(model_lasso)
coefficients(model_lasso)
coef(model_lasso,s = "lambda.1se")
model_lasso$yLimits
model_lasso$levels
model_lasso$lterms
model_lasso$xlevels
names(model_lasso$xlevels)
model_lasso$bestTune
model_lasso$results
model_lasso$finalModel
names(model_lasso)
model_lasso$resampledCM
model_lasso$perfNames
model_lasso$maximize
model_lasso$modelInfo
coef(model$finalModel)
coef(model_lasso$finalModel)
coef(model_lasso$finalModel, model$bestTune$.lambda)
coef(model_lasso$finalModel, model_lasso$bestTune$.lambda)
odel_lasso$bestTune$.lambda
model_lasso$bestTune$.lambda
model_lasso$bestTune
model_lasso$bestTune[,2]
coef(model_lasso$finalModel, model_lasso$bestTune[,2])
coef(model_lasso$finalModel, model_lasso$bestTune[,2])>0
coef(model_lasso$finalModel, model_lasso$bestTune[,2])
abs(coef(model_lasso$finalModel, model_lasso$bestTune[,2])) >0
coef(model_lasso$finalModel, model_lasso$bestTune[,2])
length(abs(coef(model_lasso$finalModel, model_lasso$bestTune[,2])) >0)
length(abs(coef(model_lasso$finalModel, model_lasso$bestTune[,2])) )
length(coef(model_lasso$finalModel, model_lasso$bestTune[,2])) >0)
length(coef(model_lasso$finalModel, model_lasso$bestTune[,2]) >0)
coef(model_lasso$finalModel, model_lasso$bestTune[,2])
