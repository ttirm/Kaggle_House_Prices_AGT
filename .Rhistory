train_z1 <- train_zones
for(i in 1:ncol(train_zones)){
dummies = model.matrix(~factor(train_zones[,i]))
dummies <- as.data.frame(dummies[,2:ncol(dummies)])
nam <- sapply(names(dummies), function(x)unlist(strsplit(x, ")"))[2])
names(dummies) <- nam
train_z1 <- cbind(train_z1, dummies)
}
train_z1 <- train_z1[, 7:ncol(train_z1)]
train_tot <- cbind(train_tot, train_z1)
test_z1 <- test_zones
for(i in 1:ncol(test_zones)){
dummies = model.matrix(~factor(test_zones[,i]))
dummies <- as.data.frame(dummies[,2:ncol(dummies)])
nam <- sapply(names(dummies), function(x)unlist(strsplit(x, ")"))[2])
names(dummies) <- nam
test_z1 <- cbind(test_z1, dummies)
}
test_z1 <- test_z1[, 7:ncol(test_z1)]
test_tot <- cbind(test_tot, test_z1)
train_r <- train_r[, !(names(train_r) %in% zones)]
exterior <- c("RoofStyle", "Exterior1st", "Exterior2nd", "MasVnrType",
"MasVnrArea","ExterQual", "ExterCond", "Foundation")
train_exterior <- train_r[, exterior]
test_exterior <- test[, exterior]
train_Ext <- train_exterior[, c(1,2,3,4,8)]
test_Ext <- test_exterior[, colnames(train_exterior[, c(1,2,3,4,8)])]
for(i in 1:ncol(train_Ext)){
dummies = model.matrix(~factor(train_Ext[,i]))
dummies <- as.data.frame(dummies[,2:ncol(dummies)])
nam <- sapply(names(dummies), function(x)unlist(strsplit(x, ")"))[2])
names(dummies) <- nam
train_exterior <- cbind(train_exterior, dummies)
}
for(i in 1:ncol(test_Ext)){
dummies = model.matrix(~factor(test_Ext[,i]))
dummies <- as.data.frame(dummies[,2:ncol(dummies)])
nam <- sapply(names(dummies), function(x)unlist(strsplit(x, ")"))[2])
names(dummies) <- nam
test_exterior <- cbind(test_exterior, dummies)
}
train_exterior <- train_exterior[, !(names(train_exterior) %in% colnames(train_Ext))]
test_exterior <- test_exterior[, !(names(test_exterior) %in% colnames(test_Ext))]
train_exterior$ExterQual <- factor(train_exterior$ExterQual, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
train_exterior$ExterQual <- as.numeric(train_exterior$ExterQual)
test_exterior$ExterQual <- factor(test_exterior$ExterQual, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
test_exterior$ExterQual <- as.numeric(test_exterior$ExterQual)
train_exterior$ExterCond <- factor(train_exterior$ExterCond, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
train_exterior$ExterCond <- as.numeric(train_exterior$ExterCond)
test_exterior$ExterCond <- factor(test_exterior$ExterCond, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
test_exterior$ExterCond <- as.numeric(test_exterior$ExterCond)
train_exterior$ExterQual1 <- train_exterior$ExterQual-train_exterior$ExterCond
test_exterior$ExterQual1 <- test_exterior$ExterQual-test_exterior$ExterCond
train_exterior <- train_exterior[,!(names(train_exterior) %in% c("ExterQual", "ExterCond"))]
test_exterior <- test_exterior[,!(names(test_exterior) %in% c("ExterQual", "ExterCond"))]
train_tot <- cbind(train_tot, train_exterior)
test_tot <- cbind(test_tot, test_exterior)
train_r <- train_r[, !(names(train_r) %in% exterior)]
train_lot <- train_r[,c("LotArea","LotShape","LotConfig")]
test_lot <- test[,c("LotArea","LotShape","LotConfig")]
train_lot1 <- train_lot[, c(2,3)]
test_lot1 <- test_lot[, c(2,3)]
for(i in 1:ncol(train_lot1)){
dummies = model.matrix(~factor(train_lot1[,i]))
dummies <- as.data.frame(dummies[,2:ncol(dummies)])
nam <- sapply(names(dummies), function(x)unlist(strsplit(x, ")"))[2])
names(dummies) <- nam
train_lot <- cbind(train_lot, dummies)
}
train_lot <- train_lot[, -c(2,3)]
for(i in 1:ncol(test_lot1)){
dummies = model.matrix(~factor(test_lot1[,i]))
dummies <- as.data.frame(dummies[,2:ncol(dummies)])
nam <- sapply(names(dummies), function(x)unlist(strsplit(x, ")"))[2])
names(dummies) <- nam
test_lot <- cbind(test_lot, dummies)
}
test_lot <- test_lot[, -c(2,3)]
train_tot <- cbind(train_tot, train_lot)
test_tot <- cbind(test_tot, test_lot)
train_r <- train_r[,!(names(train_r) %in% c("LotArea","LotShape","LotConfig"))]
train$FireplaceQu <- factor(train$FireplaceQu, levels = c("None","Po", "Fa", "TA", "Gd", "Ex"))
train$FireplaceQu <- as.numeric(train$FireplaceQu)
test$FireplaceQu <- factor(test$FireplaceQu, levels = c("None","Po", "Fa", "TA", "Gd", "Ex"))
test$FireplaceQu <- as.numeric(test$FireplaceQu)
train$Fireplace <- as.numeric(train$FireplaceQu)*as.numeric(train$Fireplaces)
test$Fireplace <- as.numeric(test$FireplaceQu)*as.numeric(test$Fireplaces)
facilities <- c("HeatingQC", "CentralAir", "Electrical")
train_fac <- train_r[, facilities]
test_fac <- test[, facilities]
train_fac$HeatingQC <- factor(train_fac$HeatingQC, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
train_fac$HeatingQC <- as.numeric(train_fac$HeatingQC)
test_fac$HeatingQC <- factor(test_fac$HeatingQC, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
test_fac$HeatingQC <- as.numeric(test_fac$HeatingQC)
train_fac$CentralAir <- factor(train_fac$CentralAir, levels = c("N", "Y"))
train_fac$CentralAir <- as.numeric(train_fac$CentralAir)
test_fac$CentralAir <- factor(test_fac$CentralAir, levels = c("N", "Y"))
test_fac$CentralAir <- as.numeric(test_fac$CentralAir)
train_fac$Electrical <- factor(train_fac$Electrical, levels = c("Mix", "FuseP", "FuseF", "FuseA", "SBrkr"))
train_fac$Electrical <- as.numeric(train_fac$Electrical)
test_fac$Electrical <- factor(test_fac$Electrical, levels = c("Mix", "FuseP", "FuseF", "FuseA", "SBrkr"))
test_fac$Electrical <- as.numeric(test_fac$Electrical)
train_fac <- sapply(train_fac, as.numeric)
test_fac <- sapply(test_fac, as.numeric)
train_tot <- cbind(train_tot, train_fac)
test_tot <- cbind(test_tot, test_fac)
train_r <- train_r[, !(names(train_r) %in% facilities)]
interior <- c("X1stFlrSF", "X2ndFlrSF", "GrLivArea", "FullBath", "HalfBath", "BedroomAbvGr",
"KitchenQual", "TotRmsAbvGrd", "WoodDeckSF", "OpenPorchSF")
train_int <- train_r[, interior]
test_int <- test[, interior]
train_int$KitchenQual <- factor(train_int$KitchenQual, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
train_int$KitchenQual <- as.numeric(train_int$KitchenQual)
test_int$KitchenQual <- factor(test_int$KitchenQual, levels = c("Po", "Fa", "TA", "Gd", "Ex"))
test_int$KitchenQual <- as.numeric(test_int$KitchenQual)
train_int <- sapply(train_int, as.numeric)
test_int <- sapply(test_int, as.numeric)
train_tot <- cbind(train_tot, train_int)
test_tot <- cbind(test_tot, test_int)
train_r <- train_r[, !(names(train_r) %in% interior)]
sale <- c("SaleType", "SaleCondition")
train_sale <- train_r[,sale]
test_sale <- test[,sale]
train_sale1 <- train_sale
test_sale1 <- test_sale
for(i in 1:ncol(train_sale1)){
dummies = model.matrix(~factor(train_sale1[,i]))
dummies <- as.data.frame(dummies[,2:ncol(dummies)])
nam <- sapply(names(dummies), function(x)unlist(strsplit(x, ")"))[2])
names(dummies) <- nam
train_sale <- cbind(train_sale, dummies)
}
train_sale <- train_sale[, -c(1,2)]
train_sale <- sapply(train_sale, as.numeric)
for(i in 1:ncol(test_sale1)){
dummies = model.matrix(~factor(test_sale1[,i]))
dummies <- as.data.frame(dummies[,2:ncol(dummies)])
nam <- sapply(names(dummies), function(x)unlist(strsplit(x, ")"))[2])
names(dummies) <- nam
test_sale <- cbind(test_sale, dummies)
}
test_sale <- test_sale[, -c(1,2)]
test_sale <- sapply(test_sale, as.numeric)
train_tot <- cbind(train_tot, train_sale)
test_tot <- cbind(test_tot, test_sale)
rem <- colnames(train_tot[, !(names(train_tot) %in% names(test_tot))])
rem <- rem[-1]
m <- matrix(0, nrow = nrow(test_lot), ncol = length(rem))
m1 <- as.data.frame(m, row.names = FALSE )
names(m1) <- rem
test_tot <- cbind(test_tot, m1)
sum(apply(test_tot, 2,function(x)sum(is.na(x))/length(x)) >0)
train_r <- train_r[, !(names(train_r) %in% sale)]
train_tot$SalePrice <- log(train$SalePrice+1)
param<-list(
objective = "reg:linear",
eval_metric = "rmse",
booster = "gbtree",
max_depth = 8,
eta = 0.123,
gamma = 0.0385,
subsample = 0.734,
colsample_bytree = 0.512
)
Training <-
xgb.train(params = param,
data = train_tot,
nrounds = 600,
watchlist = list(train = train_tot),
verbose = TRUE,
print_every_n = 50,
nthread = 6)
y_train <- train_tot$SalePrice
xgb_train <- xgb.DMatrix(model.matrix(~ , data = train_tot[,-"SalePrice"]),
label=y_train, missing=NA)
y_train <- train_tot$SalePrice
xgb_train <- xgb.DMatrix(model.matrix(~., data = train_tot[,-"SalePrice"]),
label=y_train, missing=NA)
xgb_train <- xgb.DMatrix(model.matrix(~., data = train_tot[,-train_tot$SalePrice]),
label=y_train, missing=NA)
xgb_test <- xgb.DMatrix(model.matrix(~., data = test_tot),
missing=NA)
Training <-
xgb.train(params = param,
data = xgb_train,
nrounds = 600,
watchlist = list(train = train_tot),
verbose = TRUE,
print_every_n
= 50,
nthread = 6)
Training <-
xgb.train(params = param,
data = xgb_train,
nrounds = 600,
watchlist = list(train = xgb_train),
verbose = TRUE,
print_every_n = 50,
nthread = 6)
Training
Submit<- predict(Training, newdata=xgb_test)
Submit<-data.frame(Id= Test$Id, SalePrice= Submit)
Submit<-data.frame(Id= test$Id, SalePrice= Submit)
Submit
Submit<-data.frame(Id= test$Id, SalePrice= (exp(Submit)-1)
)
Submit
(exp(Submit)-1)
Submit<- predict(Training, newdata=xgb_test)
Submit
set.seed(1904)
train_tot$SalePrice <- train$SalePrice
train_tot$month <- factor(train_r$MoSold)
test_tot$month <- factor(test$MoSold)
train_tot$SalePrice <- log(train$SalePrice+1)
fit_t3 <- train(SalePrice~., data = train_tot, method = "lm", preProcess=c("center","scale","pca"),
trControl = trainControl(method = "cv", preProcOptions = list(thresh = 0.95)))
res <- predict(fit_t3, test_tot)
res
Submit<- predict(Training, newdata=xgb_test)
Submit<-data.frame(Id= test$Id, SalePrice= (exp(Submit)-1))
Submit
write.csv(Submit, "./predictions/submission_xgboost1.csv", row.names=FALSE)
fit_t3
res <- predict(fit_t3, test_tot)
submission <- data.frame(Id = test$Id, SalePrice = (exp(Submit)-1)*0.5+(exp(res)-1)*0.5)
write.csv(submission, "./predictions/submission_ens_1.csv", row.names=FALSE)
submission
Submit<- predict(Training, newdata=xgb_test)
submission <- data.frame(Id = test$Id, SalePrice = (exp(Submit)-1)*0.5+(exp(res)-1)*0.5)
submission
write.csv(submission, "./predictions/submission_ens_1.csv", row.names=FALSE)
cv.ctrl <- trainControl(method = "repeatedcv", repeats = 1,number = 3)
xgb.grid <- expand.grid(nrounds = 500,
max_depth = seq(6,10),
eta = c(0.01,0.3, 1),
gamma = c(0.0, 0.2, 1),
colsample_bytree = c(0.5,0.8, 1)
)
xgb_tune <-train(SalePrice ~.,
data=train_tot,
method="xgbTree",
metric = "RMSE",
trControl=cv.ctrl,
tuneGrid=xgb.grid
)
cv.ctrl <- trainControl(method = "repeatedcv", repeats = 1,number = 3)
xgb.grid <- expand.grid(nrounds = 500,
max_depth = seq(6,10),
eta = c(0.01,0.3, 1),
gamma = c(0.0, 0.2, 1),
colsample_bytree = c(0.5,0.8, 1),
min_child_weight = 1     #default=1
)
xgb_tune <-train(SalePrice ~.,
data=train_tot,
method="xgbTree",
metric = "RMSE",
trControl=cv.ctrl,
tuneGrid=xgb.grid
)
xgb_tune
lambdas <- seq(1,0,-0.001)
set.seed(123)  # for reproducibility
model_ridge <- train(x=train_tot,y=y_train,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=0, # Ridge regression
lambda=lambdas))
CARET.TRAIN.CTRL <- trainControl(method="repeatedcv",
number=5,
repeats=5,
verboseIter=FALSE)
model_ridge <- train(x=train_tot,y=y_train,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=0, # Ridge regression
lambda=lambdas))
lambdas <- seq(1,0,-0.001)
model_ridge <- train(x=train_tot,y=y_train,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=0, # Ridge regression
lambda=lambdas))
model_ridge <- train(x=xgb_train,y=y_train,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=0, # Ridge regression
lambda=lambdas))
model_ridge <- train(x=train_tot,y=y_train,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=0, # Ridge regression
lambda=lambdas))
model_ridge <- train(x=train_tot,y=y_train,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=trainControl(method = "cv"),
tuneGrid=expand.grid(alpha=0, # Ridge regression
lambda=lambdas))
str(train_tot)
model_ridge <- train(x=train_tot,y=y_train,
method="glmnet",
metric="RMSE",
maximize=FALSE,
tuneGrid=expand.grid(alpha=0, # Ridge regression
lambda=lambdas))
model_ridge <- train(x=train_tot[, 1:100],y=y_train,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=trainControl(method = "cv"),
tuneGrid=expand.grid(alpha=0, # Ridge regression
lambda=lambdas))
ggplot(data=filter(model_ridge$result,RMSE<0.14)) +
geom_line(aes(x=lambda,y=RMSE))
model_ridge <- train(x=train_tot[, 1:150],y=y_train,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=trainControl(method = "cv"),
tuneGrid=expand.grid(alpha=0, # Ridge regression
lambda=lambdas))
ggplot(data=filter(model_ridge$result,RMSE<0.14)) +
geom_line(aes(x=lambda,y=RMSE))
str(train_tot)
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=trainControl(method = "cv"),
tuneGrid=expand.grid(alpha=0, # Ridge regression
lambda=lambdas))
model_ridge <- train(x=train_tot[, 1:160],y=y_train,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=trainControl(method = "cv"),
tuneGrid=expand.grid(alpha=0, # Ridge regression
lambda=lambdas))
ggplot(data=filter(model_ridge$result,RMSE<0.14)) +
geom_line(aes(x=lambda,y=RMSE))
model_ridge <- train(x=train_tot[, 1:164],y=y_train,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=trainControl(method = "cv"),
tuneGrid=expand.grid(alpha=0, # Ridge regression
lambda=lambdas))
model_ridge <- train(x=train_tot[, 1:164],y=y_train,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=0, # Ridge regression
lambda=lambdas))
ggplot(data=filter(model_ridge$result,RMSE<0.14)) +
geom_line(aes(x=lambda,y=RMSE))
mean(model_ridge$resample$RMSE)
model_ridge <- train(x=train_tot[, 1:165],y=y_train,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=0, # Ridge regression
lambda=lambdas))
ggplot(data=filter(model_ridge$result,RMSE<0.14)) +
geom_line(aes(x=lambda,y=RMSE))
mean(model_ridge$resample$RMSE)
train_tot[, 165]
names(train_tot)
train_tot1 <- train_tot[,train_tot$SalePrice]
train_tot1$month <- as.numeric(train_tot1$month)
model_ridge <- train(x=train_tot1,y=y_train,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=0, # Ridge regression
lambda=lambdas))
ggplot(data=filter(model_ridge$result,RMSE<0.14)) +
geom_line(aes(x=lambda,y=RMSE))
model_ridge
train_tot$month <- as.numeric(train_tot$month)
model_ridge <- train(x=train_tot,y=y_train,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=0, # Ridge regression
lambda=lambdas))
model_ridge
ggplot(data=filter(model_ridge$result,RMSE<0.14)) +
geom_line(aes(x=lambda,y=RMSE))
mean(model_ridge$resample$RMSE)
model_lasso <- train(x=train_tot,y=y_train,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=1,  # Lasso regression
lambda=c(1,0.1,0.05,0.01,seq(0.009,0.001,-0.001),
0.00075,0.0005,0.0001)))
apply(train_tot, 2,function(x)sum(is.na(x))/length(x))
nas2[nas2 >0]
nas2 <- apply(train_tot, 2,function(x)sum(is.na(x))/length(x))
nas2[nas2 >0]
model_lasso <- train(x=train_tot[,1:163],y=y_train,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=1,  # Lasso regression
lambda=c(1,0.1,0.05,0.01,seq(0.009,0.001,-0.001),
0.00075,0.0005,0.0001)))
model_lasso <- train(x=train_tot[,1:162],y=y_train,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=1,  # Lasso regression
lambda=c(1,0.1,0.05,0.01,seq(0.009,0.001,-0.001),
0.00075,0.0005,0.0001)))
model_lasso
model_lasso <- train(x=train_tot,y=y_train,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=1,  # Lasso regression
lambda=c(1,0.1,0.05,0.01,seq(0.009,0.001,-0.001),
0.00075,0.0005,0.0001)))
model_lasso
preds <- exp(predict(model_lasso,newdata=test_tot)) - 1
predict(model_lasso,newdata=test_tot)
model_lasso <- train(x=as.matrix(train_tot),y=y_train,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=1,  # Lasso regression
lambda=c(1,0.1,0.05,0.01,seq(0.009,0.001,-0.001),
0.00075,0.0005,0.0001)))
model_lasso
predict(model_lasso,newdata=as.matrix(test_tot))
test_tot$month <- test_tot$month
preds <- exp(predict(model_lasso,newdata=test_tot)) - 1
model_lasso <- train(x=(data.matrix(train_tot),y=y_train,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=1,  # Lasso regression
lambda=c(1,0.1,0.05,0.01,seq(0.009,0.001,-0.001),
0.00075,0.0005,0.0001)))
model_lasso <- train(x=data.matrix(train_tot),y=y_train,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=1,  # Lasso regression
lambda=c(1,0.1,0.05,0.01,seq(0.009,0.001,-0.001),
0.00075,0.0005,0.0001)))
preds <- exp(predict(model_lasso,newdata=(data.matrix(test_tot))) - 1
preds <- exp(predict(model_lasso,newdata=(data.matrix(test_tot)))) - 1
preds <- exp(predict(model_lasso,newdata=as(test_tot), "dgCMatrix") - 1
preds <- exp(predict(model_lasso,newdata=as(test_tot), "dgCMatrix")) - 1
preds <- exp(predict(model_lasso,newdata=as(test_tot), "dgCMatrix"), type = "response") - 1
preds <- exp(predict(model_lasso,newdata=as(test_tot), "dgCMatrix"), type = "raw") - 1
preds <- exp(predict(model_lasso,newdata=as(test_tot, "dgCMatrix"))) - 1
data.matrix(test_tot)
preds <- exp(predict(model_lasso,newdata= data.matrix(test_tot))) - 1
str(test_tot)
sapply(test_tot, as.numeric)
test_tot <- sapply(test_tot, as.numeric)
preds <- exp(predict(model_lasso,newdata= data.matrix(test_tot))) - 1
preds <- exp(predict(model_lasso,newdata= test_tot)) - 1
train_tot <- sapply(train_tot, as.numeric)
model_lasso <- train(x=data.matrix(train_tot),y=y_train,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=1,  # Lasso regression
lambda=c(1,0.1,0.05,0.01,seq(0.009,0.001,-0.001),
0.00075,0.0005,0.0001)))
nstall.packages("pROC")
install.packages("pROC")
library(pROC)
model_lasso <- train(x=data.matrix(train_tot),y=y_train,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=1,  # Lasso regression
lambda=c(1,0.1,0.05,0.01,seq(0.009,0.001,-0.001),
0.00075,0.0005,0.0001)))
install.packages("caret", dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
